[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/division.js",
    "content": "/**\n * @file Houses the class definitions for Divisions.\n */\nimport tinycolor from 'tinycolor2';\nimport * as Utilities from './utilities';\nimport settings from './settings';\n\n/**\n * Divisions module.\n *\n * @module flag-generator/divisions\n */\n\n/**\n * Common methods and properties of all Divisions.\n *\n * @class\n * @classdesc A collection of methods and properties common to all the Division pattern classes.\n * @requires module:flag-generator/utilities\n */\nclass Division {\n    /**\n     * Creates a Division.\n     *\n     * @example\n     * // Creates a Division. This would usually not be done.\n     * const genericDivisionObject = new Division(1, '#ffffff', '.2349785241913');\n     * @param {number} count - The number of divisions to draw.\n     * @param {number} limit - A number representing the limit for the number of divisions to draw.\n     * @param {string} color - A hexadecimal color string.\n     * @param {number} seed - A pseudo-random string generated based on a string value.\n     * @abstract\n     * @see {@link generateSeed} for more info about the seed.\n     * @todo Create a generateGap function for the Division sub-classes that might use it: Fesses, Pales, etc...\n     * @todo Create some border methods: generateBorderWidth(), etc...\n     * @todo Implement some border properties that sub-classes can use.\n     */\n  constructor(params = {count, limit, color, seed}) {\n    this.limit = params.limit;\n    this.seed = params.seed;\n    this.seedMultiplier = Utilities.generateSeedMultiplier(this.seed, this.constructor.name);\n    this.color = typeof params.color !== 'undefined' ? Utilities.generateColor(params.color) : Utilities.generateColor(undefined, this.seed, this.seedMultiplier);\n    this.count = typeof params.count !== 'undefined' ? params.count : Utilities.generateCount(params.limit, this.seed, this.seedMultiplier);\n  }\n}\n\n/**\n * CenterShape pattern.\n *\n * @class\n * @classdesc The CenterShape pattern is a generic pattern that simply creates a shape on the center of the field. Think of the Japanese flag.\n * @todo Write the CenterShape export class.\n */\nclass CenterShape {}\n\n/**\n * @TODO: This might make a better /field/ pattern than division pattern. Though technically it is a division?\n * Quarterly pattern.\n *\n * @class\n * @classdesc The Quarterly pattern describes a field with four separate and equal sections.\n * @todo Write the Quarterly export class.\n */\nclass Quarterly {}\n\nexport default Division;\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/division.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "CenterShape",
    "memberof": "src/division.js",
    "static": true,
    "longname": "src/division.js~CenterShape",
    "access": "public",
    "export": false,
    "importPath": "@carwin/flag-generator/src/division.js",
    "importStyle": null,
    "description": "CenterShape pattern.",
    "lineNumber": 54,
    "todo": [
      "Write the CenterShape export class."
    ],
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The CenterShape pattern is a generic pattern that simply creates a shape on the center of the field. Think of the Japanese flag."
      }
    ],
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Quarterly",
    "memberof": "src/division.js",
    "static": true,
    "longname": "src/division.js~Quarterly",
    "access": "public",
    "export": false,
    "importPath": "@carwin/flag-generator/src/division.js",
    "importStyle": null,
    "description": "@TODO: This might make a better /field/ pattern than division pattern. Though technically it is a division?\nQuarterly pattern.",
    "lineNumber": 64,
    "todo": [
      "Write the Quarterly export class."
    ],
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Quarterly pattern describes a field with four separate and equal sections."
      }
    ],
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "class",
    "name": "Division",
    "memberof": "src/division.js",
    "static": true,
    "longname": "src/division.js~Division",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/division.js",
    "importStyle": "Division",
    "description": "Common methods and properties of all Divisions.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "A collection of methods and properties common to all the Division pattern classes."
      },
      {
        "tagName": "@requires",
        "tagValue": "module:flag-generator/utilities"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/division.js~Division",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/division.js~Division#constructor",
    "access": "public",
    "description": "Creates a Division.",
    "examples": [
      "// Creates a Division. This would usually not be done.\nconst genericDivisionObject = new Division(1, '#ffffff', '.2349785241913');"
    ],
    "see": [
      "{@link generateSeed} for more info about the seed."
    ],
    "lineNumber": 38,
    "todo": [
      "Create a generateGap function for the Division sub-classes that might use it: Fesses, Pales, etc...",
      "Create some border methods: generateBorderWidth(), etc...",
      "Implement some border properties that sub-classes can use."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "The number of divisions to draw."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "A number representing the limit for the number of divisions to draw."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color string."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "A pseudo-random string generated based on a string value."
      }
    ],
    "abstract": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "limit",
    "memberof": "src/division.js~Division",
    "static": false,
    "longname": "src/division.js~Division#limit",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "seed",
    "memberof": "src/division.js~Division",
    "static": false,
    "longname": "src/division.js~Division#seed",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "seedMultiplier",
    "memberof": "src/division.js~Division",
    "static": false,
    "longname": "src/division.js~Division#seedMultiplier",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "color",
    "memberof": "src/division.js~Division",
    "static": false,
    "longname": "src/division.js~Division#color",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "count",
    "memberof": "src/division.js~Division",
    "static": false,
    "longname": "src/division.js~Division#count",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/division.test.js",
    "content": "import Division from './division';\nimport * as Utilities from './utilities';\nimport settings from './settings';\n\ndescribe('Division class', () => {\n  // Generate a settings object for the tests.\n  Utilities.generateSeed('test');\n\n  it('should be instantiated with all possible options', () => {\n    const testDivision = new Division(5, 1, '#ffffff', .123);\n    expect(testDivision.count).toEqual(5);\n    expect(testDivision.limit).toBe(1);\n    expect(testDivision.color.color).toBe('#ffffff');\n    expect(testDivision.seed).toBe(.123);\n  });\n\n  it('should have a seed if it is not given one during instantiation.', () => {\n    const testDivision = new Division(5, 1, '#ffffff');\n    expect(typeof testDivision.seed).toBe('number');\n    expect(testDivision.seed.toString()).toMatch(/^0./);\n  });\n\n  it('should have a color object if it is not given a hex color string during instantiation.', () => {\n    const testDivision = new Division(5, 1);\n    expect(typeof testDivision.color).toBe('object');\n    expect(testDivision.color.color).toMatch(/^#/);\n  });\n\n  it('should have a count instance variable if not provided one during instantiation', () => {\n    const testDivision = new Division();\n    expect(typeof testDivision.count).toBe('number');\n  });\n\n});\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/division.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/divisions/Bend.js",
    "content": "/**\n * @file Houses the class properties and methods for the Bend division.\n */\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\nimport Division from '../division';\n\n/**\n * Bends pattern.\n *\n * @class\n * @classdesc The Bends pattern describes a single diagonal line in either the dexter or sinister direction.\n * @augments Division\n * @namespace Divisions.Bend\n */\nexport default class Bend extends Division {\n    /**\n     * Creates a Bend.\n     *\n     * @example\n     * // Creates two white Bends across the flag with black borders\n     * const bend = new Bend(2, 'dexter', false, '#ffffff', undefined, true, 20, '#000000');\n     * // Creates a single Bend division as a party of the flag.\n     * const bendFilled = new Bend(1, 'sinister', true, '#ffffff');\n     * @param {number} count - The number of divisions to draw.\n     * @param {string} direction - The orientation of the Pall. One of: dexter, sinister.\n     * @param {boolean} party - Whether this division should take up an entire diagonal half of the flag.\n     * @param {string} color - A hexadecimal color string.\n     * @param {number} width - A width value for drawing the division.\n     * @param {boolean} border - Whether or not to draw a border around the Pall.\n     * @param {number} borderWidth - The width of the border.\n     * @param {string} borderColor - A hexadecimal color string.\n     * @todo Enhance the generation of border widths, possibly extrapolate whatever we come up with into parent Division class.\n     */\n  constructor(params = {seed, limit, count: 1, direction, party: false, color, width, border, borderWidth, borderColor}) {\n    let limit;\n    if (params.party) {\n      limit = 1;\n    } else {\n      limit = params.limit ? params.limit : 3;\n    }\n\n    super({seed: params.seed, count: params.count, limit, color: params.color});\n\n    this.party = params.party;\n    this.border = params.border;\n    this.width = params.width;\n    this.direction = typeof params.direction !== 'undefined' ? params.direction : this.generateDirection(this.seed);\n    // this.borderWidth = borderWidth > 0 ? borderWidth : this.generateSaltireWidth((settings.seed * .1234));\n    this.borderWidth = params.borderWidth || 50;\n    this.borderColor = params.borderColor || Utilities.generateColor(undefined, .50000);\n  }\n    /**\n     * Generate a direction value for the Bend.\n     *\n     * @example\n     * // Returns 'dexter'\n     * const newBend = new Bend();\n     * newBend.generateDirection(.1337)\n     * @param {number} seed - The seed number used for generated values.\n     * @returns {string} - One of: 'dexter', 'sinister'.\n     */\n    generateDirection(seed = this.seed) {\n      let generated;\n      const seedDigit = Utilities.getLastDigit(Utilities.modifySeed(seed, this.seedMultiplier));\n      if (seedDigit >=0 && seedDigit <= 5) {\n        generated = 'dexter';\n      } else if (seedDigit >=6 && seedDigit <= 9) {\n        generated = 'sinister';\n      } else {\n        throw new Error('seedDigit was not between 0 and 9');\n      }\n      return generated;\n    }\n    /**\n     * Returns the proper draw function instructions for a given direction.\n     *\n     * @example\n     * // Returns drawInstructionsDexter();\n     * const bend = new Bends();\n     * chevron.drawInstructions('dexter');\n     * @param {string} direction - One of: dexter, sinister.\n     * @returns {Function} The draw instruction function corresponding to the direction.\n     */\n    drawInstructions(direction) {\n      let instructions;\n      switch (direction) {\n        case 'dexter':\n          instructions = this.drawInstructionsDexter();\n          break;\n        case 'sinister':\n          instructions = this.drawInstructionsSinister();\n          break;\n        default:\n          throw new Error('Direction passed to Bend\\'s drawInstructions method was not one of \\'sinister\\' or \\'dexter\\'.');\n        }\n        return instructions;\n    }\n\n    /**\n     * Generates the draw instructions for the palewise and palewiseReversed directions.\n     *\n     * @example\n     * // Returns an instruction set for the palewise direction based on the flag dimensions.\n     * // [\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * // ]\n     * const bends = new Bends();\n     * const instructions = bends.drawInstructionsDexter();\n     * @param {boolean} party - Whether or not the division should be filled.\n     * @returns {Array} An array of objects containing canvas drawing instructions.\n     */\n    drawInstructionsDexter(party = this.party) {\n        let instructions;\n        if (!party) {\n            instructions = [\n                {moveTo: [0, 0]}, // start top-left\n                {lineTo: [settings.flagWidth, settings.flagHeight]}, // draw to bottom-right\n            ]\n        } else {\n            instructions = [\n                {moveTo: [0, 0]}, // start top-left\n                {lineTo: [settings.flagWidth, settings.flagHeight]}, // draw to bottom-right\n                {lineTo: [0, settings.flagHeight]}, // draw to bottom-left\n                {lineTo: [0, 0]}, // draw to top-left\n            ]\n        }\n        return instructions;\n    }\n    /**\n     * Generates the draw instructions for the sinister.\n     *\n     * @example\n     * // Returns an instruction set for the sinister direction based on the flag dimensions.\n     * // [\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * // ]\n     * const bends = new Bends();\n     * const instructions = bends.drawInstructionsSinister();\n     * @param {boolean} party - Whether or not the division should be filled.\n     * @returns {Array} An array of objects containing canvas drawing instructions.\n     */\n    drawInstructionsSinister(party = this.party) {\n        let instructions;\n        if (!party) {\n            instructions = [\n                {moveTo: [settings.flagWidth, 0]}, // start top right\n                {lineTo: [0, settings.flagHeight]}, // draw to bottom left\n            ];\n        } else {\n            instructions = [\n                {moveTo: [settings.flagWidth, 0]}, // start top right\n                {lineTo: [0, settings.flagHeight]}, // draw to bottom left\n                {lineTo: [settings.flagWidth, settings.flagHeight]}, // draw to bottom right\n                {lineTo: [settings.flagWidth, 0]}, // draw to top right\n            ];\n        }\n        return instructions;\n    }\n\n    /**\n     * A semi-curried function that applies the passed arguments to drawSteps.\n     * Used as a callback for array.map() to pass arguments into the map function's\n     * callback function.\n     *\n     * @example\n     * // Applies a shift width of 100 to a drawStep's parameters.\n     * for (let i = 0, len = drawSteps.length; i < len; i++) {\n           const step = Object.keys(drawSteps[i]);\n           const stepParams = Object.values(drawSteps[i])[0];\n           ctx[step](...stepParams.map(shiftStep(positionShift, 'sinister', 'dexter')));\n     * }\n     * @param {number} positionShift - The value by which we will shift the inner function's p parameter.\n     * @param {string} direction - The string value of the current operating direction.\n     * @param {string} oddDirection - The odd-man-out direction that needs special processing.\n     * @returns {Function} A callback function that operates using the values of shiftStep().\n     * @todo The shift position is based entirely on 3:5 flags, make it more... Betterer...\n     * @todo Come up with a better description, and maybe a better name for the oddDirection parameter.\n     */\n    shiftStep(positionShift, direction, oddDirection) {\n      return (p, index) => {\n        // If the direction is the oddDirection, we need to add the positionShift to\n        // the x coordinate (0) and subtract the positionShift from the y coordinate (1).\n        let calculated;\n        if (direction === oddDirection) {\n            calculated = index === 0 ? p + positionShift : p - positionShift;\n        }\n            // If the direction is not the oddDirection, we can simply add the positionShift\n        // to both the x and y coords.\n        else {\n            calculated = p + positionShift;\n        }\n        return calculated;\n      }\n    }\n    /**\n     * Draws the Chevron division on a canvas.\n     *\n     * @example\n     * // Draws the Bends division on the canvas.\n     * const bend = new Bend();\n     * bend.draw(ctx);\n     * @param {object} ctx - An object containing a canvas context.\n     */\n    draw(ctx) {\n        const drawSteps = this.drawInstructions(this.direction);\n        const bendWidth = this.width || Math.round(this.seed * 100);\n        ctx.beginPath();\n\n        // Bends has a ton of possible options, so we start by looping over the count.\n        for (let i = 0, len = this.count; i < len; i++) {\n            // If we have more than one bend to draw, we need to set some\n            // offsets for the second and third bends. That's what's happening\n            // here with the switch and the positionShift variable.\n            let positionShift = 0;\n            // If there are 2 bends, split them somewhat equally from the center.\n            if (this.count === 2) {\n                switch (true) {\n                    case i === 0 && !this.party:\n                        positionShift = -70;\n                        break;\n                    case i === 1:\n                        positionShift = 70;\n                        break;\n                }\n                // If there are 3 bends, draw one in the center and the others spaced equally from it.\n            } else if (this.count === 3) {\n                switch (i) {\n                    case 0:\n                        positionShift = 0;\n                        break;\n                    case 1:\n                        positionShift = -100;\n                        break;\n                    case 2:\n                        positionShift = 100;\n                        break;\n                }\n            }\n            // Now that we have that out of the way, let's do some drawing.\n            // Loop over the draw steps. For each step, apply the position shift\n            // we decided on above.\n            //\n            // We'll start with borders, since they sit behind the main drawing.\n            // If there's a border, draw it first with a larger width.\n            if (this.border && !this.party) {\n                for (let k = 0, len3 = drawSteps.length; k < len3; k++) {\n                    const step = Object.keys(drawSteps[k]);\n                    const stepParams = Object.values(drawSteps[k])[0];\n                    // This is a pretty complicated set of instructions. If you're\n                    // having trouble following the logic, it's repeated and\n                    // documented in the shiftStep function definition.\n                    // Basically, we're applying the positionShift to the bend coords.\n                    ctx[step](...stepParams.map(this.shiftStep(positionShift, this.direction, 'dexter')));\n                }\n                ctx.lineWidth = bendWidth + this.borderWidth;\n                ctx.strokeStyle = this.color.complement;\n                ctx.stroke();\n            }\n\n            // Keep in mind this is a loop within a loop, so for every bend (outer loop),\n            // we're running each of the draw steps (inner loop).\n            for (let j = 0, len2 = drawSteps.length; j < len2; j++) {\n                // Get the method name from the drawStep's key.\n                const step = Object.keys(drawSteps[j]);\n                // Get the parameters to apply to each method. These are all x,y coordinates.\n                const stepParams = Object.values(drawSteps[j])[0];\n                // Run the method off of the ctx object, that's what it references!\n                // For the parameters, send them all using the ... notation, and then run\n                // an array.map() callback to apply the position shift.\n                ctx[step](...stepParams.map(this.shiftStep(positionShift, this.direction, 'dexter')));\n            }\n            // If we're drawing the division as a party, we can only have a single bend.\n            // Instead of stroking the path, we're going to fill it so that it takes up\n            // a diagonal half of the entire flag.\n            if (this.party) {\n                ctx.fillStyle = this.color.color;\n                ctx.fill();\n                // Since we can only have 1 Bend if we're drawing it as a party, let's break\n                // the loop as soon as we've created it.\n                break;\n            }\n                // If we don't want a party per bend, we'll stroke the lines we drew during the\n                // earlier drawStep stage, then continue on with the loop in case there are\n            // more bends to draw.\n            else {\n                ctx.strokeStyle = this.color.color;\n                ctx.lineWidth = bendWidth;\n                ctx.stroke();\n            }\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Bend.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "class",
    "name": "Bend",
    "memberof": "src/divisions/Bend.js",
    "static": true,
    "longname": "src/divisions/Bend.js~Bend",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Bend.js",
    "importStyle": "Bend",
    "description": "Bends pattern.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Bends pattern describes a single diagonal line in either the dexter or sinister direction."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      },
      {
        "tagName": "@namespace",
        "tagValue": "Divisions.Bend"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 61,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Bend.js~Bend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#constructor",
    "access": "public",
    "description": "Creates a Bend.",
    "examples": [
      "// Creates two white Bends across the flag with black borders\nconst bend = new Bend(2, 'dexter', false, '#ffffff', undefined, true, 20, '#000000');\n// Creates a single Bend division as a party of the flag.\nconst bendFilled = new Bend(1, 'sinister', true, '#ffffff');"
    ],
    "lineNumber": 35,
    "todo": [
      "Enhance the generation of border widths, possibly extrapolate whatever we come up with into parent Division class."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "The number of divisions to draw."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The orientation of the Pall. One of: dexter, sinister."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "party",
        "description": "Whether this division should take up an entire diagonal half of the flag."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color string."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "A width value for drawing the division."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "border",
        "description": "Whether or not to draw a border around the Pall."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "borderWidth",
        "description": "The width of the border."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "borderColor",
        "description": "A hexadecimal color string."
      }
    ]
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "party",
    "memberof": "src/divisions/Bend.js~Bend",
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#party",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "border",
    "memberof": "src/divisions/Bend.js~Bend",
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#border",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "width",
    "memberof": "src/divisions/Bend.js~Bend",
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#width",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "direction",
    "memberof": "src/divisions/Bend.js~Bend",
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#direction",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "borderWidth",
    "memberof": "src/divisions/Bend.js~Bend",
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#borderWidth",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "borderColor",
    "memberof": "src/divisions/Bend.js~Bend",
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#borderColor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "generateDirection",
    "memberof": "src/divisions/Bend.js~Bend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#generateDirection",
    "access": "public",
    "description": "Generate a direction value for the Bend.",
    "examples": [
      "// Returns 'dexter'\nconst newBend = new Bend();\nnewBend.generateDirection(.1337)"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - One of: 'dexter', 'sinister'."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The seed number used for generated values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "One of: 'dexter', 'sinister'."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "drawInstructions",
    "memberof": "src/divisions/Bend.js~Bend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#drawInstructions",
    "access": "public",
    "description": "Returns the proper draw function instructions for a given direction.",
    "examples": [
      "// Returns drawInstructionsDexter();\nconst bend = new Bends();\nchevron.drawInstructions('dexter');"
    ],
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} The draw instruction function corresponding to the direction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "One of: dexter, sinister."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The draw instruction function corresponding to the direction."
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "drawInstructionsDexter",
    "memberof": "src/divisions/Bend.js~Bend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#drawInstructionsDexter",
    "access": "public",
    "description": "Generates the draw instructions for the palewise and palewiseReversed directions.",
    "examples": [
      "// Returns an instruction set for the palewise direction based on the flag dimensions.\n// [\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {lineTo: [x, y]},\n// ]\nconst bends = new Bends();\nconst instructions = bends.drawInstructionsDexter();"
    ],
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of objects containing canvas drawing instructions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "party",
        "description": "Whether or not the division should be filled."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of objects containing canvas drawing instructions."
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "drawInstructionsSinister",
    "memberof": "src/divisions/Bend.js~Bend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#drawInstructionsSinister",
    "access": "public",
    "description": "Generates the draw instructions for the sinister.",
    "examples": [
      "// Returns an instruction set for the sinister direction based on the flag dimensions.\n// [\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {lineTo: [x, y]},\n// ]\nconst bends = new Bends();\nconst instructions = bends.drawInstructionsSinister();"
    ],
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of objects containing canvas drawing instructions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "party",
        "description": "Whether or not the division should be filled."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of objects containing canvas drawing instructions."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "shiftStep",
    "memberof": "src/divisions/Bend.js~Bend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#shiftStep",
    "access": "public",
    "description": "A semi-curried function that applies the passed arguments to drawSteps.\nUsed as a callback for array.map() to pass arguments into the map function's\ncallback function.",
    "examples": [
      "// Applies a shift width of 100 to a drawStep's parameters.\nfor (let i = 0, len = drawSteps.length; i < len; i++) {\nconst step = Object.keys(drawSteps[i]);\nconst stepParams = Object.values(drawSteps[i])[0];\nctx[step](...stepParams.map(shiftStep(positionShift, 'sinister', 'dexter')));\n}"
    ],
    "lineNumber": 184,
    "todo": [
      "The shift position is based entirely on 3:5 flags, make it more... Betterer...",
      "Come up with a better description, and maybe a better name for the oddDirection parameter."
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} A callback function that operates using the values of shiftStep()."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "positionShift",
        "description": "The value by which we will shift the inner function's p parameter."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The string value of the current operating direction."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "oddDirection",
        "description": "The odd-man-out direction that needs special processing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A callback function that operates using the values of shiftStep()."
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Bend.js~Bend",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Bend.js~Bend#draw",
    "access": "public",
    "description": "Draws the Chevron division on a canvas.",
    "examples": [
      "// Draws the Bends division on the canvas.\nconst bend = new Bend();\nbend.draw(ctx);"
    ],
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "An object containing a canvas context."
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/divisions/Bend.test.js",
    "content": "import Bend from './Bend.js';\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\nimport 'jest-canvas-mock';\n\nlet canvas;\nlet ctx;\n\nsettings.flagHeight = 300;\nsettings.flagWidth = 500;\n\ndescribe('Bend class', () => {\n  // Generate a settings object for the tests.\n  Utilities.generateSeed('test');\n  const expectedDirections = ['sinister', 'dexter'];\n\n  it('should be instantiated given all possible options', () => {\n    const newBend = new Bend(5, 'dexter', true, '#ffffff', 20, true, 10, '#000000');\n    expect(newBend.limit).toBe(1);\n    expect(newBend.seed).toBe(0.8722025543160253);\n    expect(newBend.seedMultiplier).toBe(0.57653557072);\n    expect(newBend.color.color).toBe('#ffffff');\n    expect(newBend.count).toEqual(5);\n    expect(newBend.party).toBe(true);\n    expect(newBend.border).toBe(true);\n    expect(newBend.width).toBe(20);\n    expect(newBend.direction).toBe('dexter');\n    expect(newBend.borderWidth).toBe(10);\n    expect(newBend.borderColor).toBe('#000000');\n  });\n\n  it('should not have a party if it is not given one during instantiation.', () => {\n    const newBend = new Bend(5, 'dexter', undefined, '#ffffff', 20, true, 10, '#000000');\n    expect(newBend.party).toBe(false);\n  });\n\n  it('should have a borderWidth if it is not given a hex color string during instantiation.', () => {\n    const newBend = new Bend(5, 'dexter', undefined, '#ffffff', 20, true, undefined, '#000000');\n    expect(typeof newBend.borderWidth).toBe('number');\n  });\n\n  it('should have a borderColor instance variable if not provided one during instantiation', () => {\n    const newBend = new Bend(5, 'dexter', undefined, '#ffffff', 20, true);\n    expect(typeof newBend.borderColor).toBe('object');\n    expect(newBend.borderColor.color).toMatch(/^#/);\n  });\n\n  it('should be able to generate a direction if none is passed during instantiation', () => {\n    const newBend = new Bend(5);\n    expect(\n      newBend.direction === expectedDirections[0] ||\n      newBend.direction === expectedDirections[1]\n    ).toEqual(true);\n  });\n\n  describe('should have a generateDirection() method', () => {\n    const newBend = new Bend(1, 'dexter', undefined, '#ffffff', 20, true);\n    it('which should provide a direction, even if no seed value is given to it directly as a parameter', () => {\n      expect(typeof newBend.generateDirection()).toBe('string');\n      expect(newBend.generateDirection()).toBe('dexter');\n    });\n    it('which should provide a direction string of dexter if passed a seed that generates a number from 0 - 5 when multiplied by the seedMultiplier', () => {\n      expect(newBend.generateDirection(.20983823471132958987123974)).toBe('dexter');\n    });\n    it('which should provide a direction string of sinister if passed a seed that generates a number from 6 - 9 when multiplied by the seedMultiplier', () => {\n      expect(newBend.generateDirection(.42379)).toBe('sinister');\n    });\n\n    it('which should throw an error if a digit outside of 0 - 9 is somehow generated.', () => {\n      const newBend = new Bend(1, 'dexter', undefined, '#ffffff', 20, true);\n      expect(() => {\n        newBend.generateDirection('thisisnotaseed!');\n      }).toThrow();\n    });\n\n  });\n\n  describe('should have a drawInstructions() method', () => {\n    const newBend = new Bend(5, 'dexter', undefined, '#ffffff', 20, true);\n    it('which should return the correct instructions object based on the given string', () => {\n      expect(newBend.drawInstructions('dexter')).toEqual([{ moveTo: [0, 0] }, { lineTo: [500, 300]}]);\n      expect(newBend.drawInstructions('sinister')).toEqual([{ moveTo: [500, 0] }, { lineTo: [0, 300]}]);\n    });\n    it('which should throw an error if passed a string other than \\'dexter\\' or \\'sinister\\'.', () => {\n      expect(() => {\n        newBend.drawInstructions('left');\n      }).toThrow();\n    });\n  });\n\n  describe('should have a drawInstructionsDexter() method', () => {\n    const newBend = new Bend(5, 'dexter', undefined, '#ffffff', 20, true);\n    it('which should return an array of objects containing x,y coordinate pairs', () => {\n      expect(newBend.drawInstructionsDexter()).toHaveLength(2);\n      expect(newBend.drawInstructionsDexter()).toEqual([\n        { moveTo: [0, 0] },\n        { lineTo: [500, 300]}\n      ]);\n    });\n    it('which should return an array of objects containing four pairs of x,y coordinates if the bend is a party (half the flag, diagonally)', () => {\n      const testPartyDivision = new Bend(5, 'dexter', undefined, '#ffffff', 20, true);\n      expect(testPartyDivision.drawInstructionsDexter(true)).toHaveLength(4);\n      expect(testPartyDivision.drawInstructionsDexter(true)).toEqual([\n        {moveTo: [0, 0]},\n        {lineTo: [500, 300]},\n        {lineTo: [0, 300]},\n        {lineTo: [0, 0]}\n      ]);\n    });\n  });\n\n\n  describe('should have a drawInstructionsSinister() method', () => {\n    const newBend = new Bend(5, 'sinister', undefined, '#ffffff', 20, true);\n    it('which should return an array of objects containing x,y coordinate pairs', () => {\n      expect(newBend.drawInstructionsSinister()).toHaveLength(2);\n      expect(newBend.drawInstructionsSinister()).toEqual([\n        { moveTo: [500, 0] },\n        { lineTo: [0, 300]}\n      ]);\n    });\n    it('which should return an array of objects containing four pairs of x,y coordinates if the bend is a party (half the flag, diagonally)', () => {\n      const testPartyDivision = new Bend(5, 'sinister', undefined, '#ffffff', 20, true);\n      expect(testPartyDivision.drawInstructionsSinister(true)).toHaveLength(4);\n      expect(testPartyDivision.drawInstructionsSinister(true)).toEqual([\n        {moveTo: [500, 0]},\n        {lineTo: [0, 300]},\n        {lineTo: [500, 300]},\n        {lineTo: [500, 0]}\n      ]);\n    });\n  });\n\n  // @todo: This sort of sucks, I'm not sure if I'm even testing this function in a way that's worthwhile.\n  describe('should have a shiftStep() method', () => {\n    const twoBends = new Bend(2, 'dexter');\n    const drawSteps = twoBends.drawInstructionsSinister(true);\n    const ctxMock = { lineTo(step) {return step}, moveTo(step) { return step } };\n    it('which should modify the drawn instructions to shift the position of the Bend', () => {\n      for (let i = 0; i < drawSteps.length; i++) {\n        const step = Object.keys(drawSteps[i]);\n        const stepParams = Object.values(drawSteps[i])[0];\n        const stepRun = ('logit', ctxMock[step](...stepParams.map(twoBends.shiftStep(1, twoBends.direction, 'sinister'))));\n        const stepRun2 = ('logit', ctxMock[step](...stepParams.map(twoBends.shiftStep(1, twoBends.direction, 'dexter'))));\n        switch (i) {\n        case 0 || 2 || 3:\n          expect(stepRun).toBe(501);\n          expect(stepRun2).toBe(501);\n          break;\n        case 1:\n          expect(stepRun).toBe(1);\n          expect(stepRun2).toBe(1);\n          break;\n        }\n      }\n    });\n  });\n\n  describe('should have a draw() method', () => {\n    const singleBendDexter = new Bend(1, 'dexter', false, '#ffffff', 20, true, 15, '#000000');\n    const twoBendDexter = new Bend(2, 'dexter');\n    const threeBendSinister = new Bend(3, 'sinister');\n    const partyBend = new Bend(2, 'sinister', true);\n    // Mock the canvas.\n    canvas = document.createElement('canvas');\n    canvas.width = 500;\n    canvas.height = 300;\n    ctx = canvas.getContext('2d');\n\n    it('which should not throw an error when drawing on a canvas', () => {\n      expect(() => {\n        threeBendSinister.draw(ctx)\n      }).not.toThrow();\n    });\n\n    it('which should draw 3 Bends on a canvas when called with a count of 3', () => {\n      // Make sure the mocked canvas paths match the Bend's drawInstructions.\n      ctx.__clearDrawCalls();\n      threeBendSinister.draw(ctx);\n      const drawStepsSinister = threeBendSinister.drawInstructions('sinister');\n      const path = ctx.__getPath();\n      for (let i = 0; i < drawStepsSinister.length; i++) {\n        const step = Object.keys(drawStepsSinister[i]);\n        expect(path[i+1].props.x).toBe(Object.values(drawStepsSinister[i])[0][0]);\n        expect(path[i+1].props.y).toBe(Object.values(drawStepsSinister[i])[0][1]);\n      }\n    });\n\n    it('which should draw 2 Bends on a canvas when called with a count of 2', () => {\n      ctx.__clearDrawCalls();\n      twoBendDexter.draw(ctx);\n      const drawStepsDexter = twoBendDexter.drawInstructions('dexter');\n      const path = ctx.__getPath();\n      for (let i = 0; i < drawStepsDexter.length; i++) {\n        const step = Object.keys(drawStepsDexter[i]);\n        if (i === 0 || i === 2 || i === 3) {\n          expect(path[i+1].props.x).toBe(Object.values(drawStepsDexter[i])[0][0] - 70);\n          expect(path[i+1].props.y).toBe(Object.values(drawStepsDexter[i])[0][1] + 70);\n        } else if (i === 1) {\n          expect(path[i+1].props.x).toBe(Object.values(drawStepsDexter[i])[0][0] - 70);\n          expect(path[i+1].props.y).toBe(Object.values(drawStepsDexter[i])[0][1] + 70);\n        }\n      }\n    });\n\n    it('which should draw a party if that option is passed, ignoring the count parameter', () => {\n      ctx.__clearDrawCalls();\n      partyBend.draw(ctx);\n      const path = ctx.__getPath();\n      const drawStepsParty = partyBend.drawInstructions('sinister');\n      for (let i = 0; i < drawStepsParty.length; i++) {\n        const step = Object.keys(drawStepsParty[i]);\n        expect(path[i+1].props.x).toBe(Object.values(drawStepsParty[i])[0][0]);\n        expect(path[i+1].props.y).toBe(Object.values(drawStepsParty[i])[0][1]);\n      }\n    });\n\n    it('which should draw a border if that option is passed without a party option', () => {\n      // Basically we just need to watch the events and make sure the draw steps happen twice.\n      // That's the signal that a border was drawn, and then the main Bend was drawn on top.\n      ctx.__clearEvents();\n      ctx.__clearDrawCalls();\n      singleBendDexter.draw(ctx);\n      const events = ctx.__getEvents();\n      const drawSteps = singleBendDexter.drawInstructions('dexter');\n      for (let i = 1; i < events.length; i++) {\n        if (Object.keys(events[i]) === 'moveTo' || Object.keys(events[i] === 'lineTo')) {\n          let step;\n          if (i < drawSteps.length) {\n            step = Object.keys(drawSteps[i]);\n            expect(events[i+1].props.x).toBe(Object.values(drawSteps[i])[0][0]);\n            expect(events[i+1].props.y).toBe(Object.values(drawSteps[i])[0][1]);\n          }\n        }\n      }\n    });\n\n  });\n\n});\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Bend.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/divisions/Border.js",
    "content": "/**\n * @file Houses the class properties and methods for the Border division.\n */\nimport settings from '../settings';\nimport Division from '../division';\n\n/** Border pattern.\n *\n * @class\n * @classdesc The Border pattern on a flag describes a border around each edge of the field.\n * <br>\n * If multiple Divisions are ever combined on a flag, the Border pattern should likely be\n * drawn last to provide a frame effect.\n * @augments Division\n * @namespace Division.Border\n */\nexport default class Border extends Division {\n    /**\n     * Creates Border.\n     *\n     * @example\n     * // Instantiates a Border\n     * const border = new Border(20);\n     * @param {string} color - A hex color value.\n     * @param {number} borderWidth - A number representing the size of the border. This is used for coordinate drawing on a canvas for now.\n     * @augments Division\n     * @todo Handle border width more elegantly than taking a flat value from the caller.\n     */\n  constructor(params = {seed, color, borderWidth}) {\n    const limit = 1;\n    const count = 1;\n    super({seed: params.seed, count, limit, color: params.color});\n    this.borderWidth = params.borderWidth || 20;\n  }\n  /**\n   * Draws the Border pattern on a canvas.\n   *\n   * @example\n   * // Draws the Border pattern.\n   * border.draw(ctx);\n   * @param {object} ctx - An object containing a canvas context.\n   */\n  draw(ctx) {\n    // Set the line width\n    ctx.lineWidth = this.borderWidth;\n    ctx.strokeStyle = this.color.color;\n    ctx.strokeRect(0, 0, settings.flagWidth, settings.flagHeight);\n  }\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Border.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "Border",
    "memberof": "src/divisions/Border.js",
    "static": true,
    "longname": "src/divisions/Border.js~Border",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Border.js",
    "importStyle": "Border",
    "description": "Border pattern.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Border pattern on a flag describes a border around each edge of the field.\n<br>\nIf multiple Divisions are ever combined on a flag, the Border pattern should likely be\ndrawn last to provide a frame effect."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      },
      {
        "tagName": "@namespace",
        "tagValue": "Division.Border"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Border.js~Border",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Border.js~Border#constructor",
    "access": "public",
    "description": "Creates Border.",
    "examples": [
      "// Instantiates a Border\nconst border = new Border(20);"
    ],
    "lineNumber": 29,
    "todo": [
      "Handle border width more elegantly than taking a flat value from the caller."
    ],
    "unknown": [
      {
        "tagName": "@augments",
        "tagValue": "Division"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hex color value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "borderWidth",
        "description": "A number representing the size of the border. This is used for coordinate drawing on a canvas for now."
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "borderWidth",
    "memberof": "src/divisions/Border.js~Border",
    "static": false,
    "longname": "src/divisions/Border.js~Border#borderWidth",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Border.js~Border",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Border.js~Border#draw",
    "access": "public",
    "description": "Draws the Border pattern on a canvas.",
    "examples": [
      "// Draws the Border pattern.\nborder.draw(ctx);"
    ],
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "An object containing a canvas context."
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "file",
    "name": "src/divisions/Canton.js",
    "content": "/**\n * @file Houses the class properties and methods for the Canton division.\n */\nimport settings from '../settings';\nimport Division from '../division';\n\n/**\n * Canton pattern.\n *\n * @class\n * @classdesc The Canton pattern describes a small quarter of the flag, usually the top dexter quarter. It is often filled by a pattern, like in the flag of the United States, or an entire flag in the case of many British colony flags.\n * @augments Division\n * @namespace Divisions.Canton\n * @todo Write the Canton export class.\n */\nexport class Canton extends Division {\n    constructor(color, aspect) {\n        const limit = 1;\n        super(1, limit, color);\n        this.aspect = aspect;\n    }\n    drawInstructions() {\n        return [\n            {moveTo: [0, 0]}, // start top-left\n            {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n            {lineTo: [0, settings.flagHeight]}, // draw to bottom left.\n        ];\n    }\n    draw() {\n\n    }\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Canton.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "Canton",
    "memberof": "src/divisions/Canton.js",
    "static": true,
    "longname": "src/divisions/Canton.js~Canton",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Canton.js",
    "importStyle": "{Canton}",
    "description": "Canton pattern.",
    "lineNumber": 16,
    "todo": [
      "Write the Canton export class."
    ],
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Canton pattern describes a small quarter of the flag, usually the top dexter quarter. It is often filled by a pattern, like in the flag of the United States, or an entire flag in the case of many British colony flags."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      },
      {
        "tagName": "@namespace",
        "tagValue": "Divisions.Canton"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Canton.js~Canton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Canton.js~Canton#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "aspect",
    "memberof": "src/divisions/Canton.js~Canton",
    "static": false,
    "longname": "src/divisions/Canton.js~Canton#aspect",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "drawInstructions",
    "memberof": "src/divisions/Canton.js~Canton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Canton.js~Canton#drawInstructions",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Canton.js~Canton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Canton.js~Canton#draw",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/divisions/Chevron.js",
    "content": "/**\n * @file Houses the class properties and methods for the Chevron division.\n */\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\nimport Division from '../division';\n\n/** Chevron pattern.\n *\n * @class\n * @classdesc The Chevron pattern describes two diagonal lines beginning from two corners and stopping in the center of the field where they meet.\n * @augments Division\n * @namespace Divisions.Chevron\n */\nexport default class Chevron extends Division {\n    /**\n     * Creates a Chevron.\n     *\n     * @example\n     * // Creates a horizontally oriented, white Pall with a black border.\n     * const pall = new Pall('fesswise', '#ffffff', true, 20, '#000000');\n     * @param {string} direction - The orientation of the Pall. One of: fesswise, palewise, fesswiseReversed, palewiseReverse.\n     * @param {string} color - A hexadecimal color string.\n     * @param {number} width - A width value for drawing the division.\n     * @param {boolean} border - Whether or not to draw a border around the Pall.\n     * @param {number} borderWidth - The width of the border.\n     * @param {string} borderColor - A hexadecimal color string.\n     */\n  constructor(params = {direction, color, width, border, borderWidth, borderColor, seed}) {\n    // Only 1 Chevron per instance, ever.\n    const limit = 1;\n    super({seed: params.seed, count: 1, limit, color: params.color});\n    this.border = params.border;\n    this.width = params.width;\n    this.direction = typeof params.direction !== 'undefined' ? params.direction : this.generateDirection();\n\n    // @TODO: extrapolate generateSaltireWidth into Division.\n    // this.borderWidth = borderWidth > 0 ? borderWidth : this.generateSaltireWidth((settings.seed * .1234));\n    this.borderWidth = params.borderWidth || 50;\n    this.borderColor = params.borderColor || Utilities.generateColor(undefined, .50000);\n  }\n    /**\n     * Generate a direction value for the Chevron.\n     *\n     * @example\n     * // Returns 'palewiseReversed'\n     * const newChevron = new Chevron();\n     * newPale.generateDirection(.1337)\n     * @param {number} seed - The seed number used for generated values.\n     * @returns {string} - One of: 'pallwise', 'fesswise', 'pallwiseReversed', 'fesswiseReversed'.\n     * @todo Rethink the directions, use some kind of probability or something more elegant than this.\n     */\n    generateDirection(seed = this.seed) {\n        let generated;\n        const seedDigit = Utilities.getLastDigit(Utilities.modifySeed(this.seed, this.seedMultiplier));\n        if (seedDigit >=1 && seedDigit <= 3) {\n            generated = 'palewise';\n        } else if (seedDigit === 4 || seedDigit === 5) {\n            generated = 'fesswise';\n        } else if (seedDigit === 6 || seedDigit === 7) {\n            generated = 'palewiseReversed';\n        } else if (seedDigit === 8 || seedDigit === 9) {\n            generated = 'fesswiseReversed';\n        } else {\n            generated = 'fesswiseReversed';\n        }\n        return generated;\n    }\n\n    /**\n     * Returns the proper draw function instructions for a given direction.\n     *\n     * @example\n     * // Returns drawInstructionsPalewise();\n     * const chevron = new Chevron();\n     * chevron.drawInstructions('palewise');\n     * @param {string} direction - One of: 'fesswise', 'palewise', 'fesswiseReversed', 'palewiseReversed'.\n     * @returns {Function} The draw instruction function corresponding to the direction.\n     */\n    drawInstructions(direction) {\n        let instructions;\n        switch (direction) {\n            case 'palewise':\n                instructions = this.drawInstructionsPalewise();\n                break;\n            case 'palewiseReversed':\n                instructions = this.drawInstructionsPalewise(true);\n                break;\n            case 'fesswise':\n                instructions = this.drawInstructionsFesswise();\n                break;\n            case 'fesswiseReversed':\n                instructions = this.drawInstructionsFesswise(true);\n                break;\n        }\n        return instructions;\n    }\n\n    /**\n     * Generates the draw instructions for the palewise and palewiseReversed directions.\n     *\n     * @example\n     * // Returns an instruction set for the palewise direction based on the flag dimensions.\n     * // [\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * // ]\n     * const chevron = new Chevron();\n     * const instructions = chevron.drawInstructionsPalewise();\n     * @param {boolean} reversed - Whether or not to return the reverse draw instructions.\n     * @returns {Array} An array of objects containing canvas drawing instructions.\n     */\n    drawInstructionsPalewise(reversed) {\n        let instructions;\n        if (!reversed) {\n            instructions = [\n                {moveTo: [0, 0]}, // start top-left\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n                {lineTo: [0, settings.flagHeight]}, // draw to bottom left.\n            ]\n        } else {\n            instructions = [\n                {moveTo: [settings.flagWidth, 0]}, // start top-right\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n                {lineTo: [settings.flagWidth, settings.flagHeight]}, // draw to bottom right\n            ]\n        }\n        return instructions;\n    }\n    /**\n     * Generates the draw instructions for the fesswise and fesswiseReversed directions.\n     *\n     * @example\n     * // Returns an instruction set for the fesswise direction based on the flag dimensions.\n     * // [\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * // ]\n     * const chevron = new Chevron();\n     * const instructions = chevron.drawInstructionsFesswise();\n     * @param {boolean} reversed - Whether or not to return the reverse draw instructions.\n     * @returns {Array} An array of objects containing canvas drawing instructions.\n     */\n    drawInstructionsFesswise(reversed) {\n        let instructions;\n        if (!reversed) {\n            instructions = [\n                {moveTo: [0, 0]}, // start top left\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n                {lineTo: [settings.flagWidth, 0]}, // draw to top right\n            ];\n        } else {\n            instructions = [\n                {moveTo: [0, settings.flagHeight]}, // start bottom left\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n                {lineTo: [settings.flagWidth, settings.flagHeight]}, // draw to bottom right\n            ];\n        }\n        return instructions;\n    }\n\n    /**\n     * Draws the Chevron division on a canvas.\n     *\n     * @example\n     * // Draws the Chevron division on the canvas.\n     * const chevron = new Chevron();\n     * chevron.draw(ctx);\n     * @param {object} ctx - An object containing a canvas context.\n     */\n    draw(ctx) {\n        const drawSteps = this.drawInstructions(this.direction);\n        const chevronWidth = this.width || Math.round(this.seed * 100);\n        ctx.beginPath();\n\n        // If there's a border, draw it first with a larger width.\n        if (this.border) {\n            for (let i = 0, len = drawSteps.length; i < len; i++) {\n                const step = Object.keys(drawSteps[i]);\n                const stepParams = Object.values(drawSteps[i])[0];\n                ctx[step](...stepParams);\n            }\n            ctx.lineWidth = chevronWidth + this.borderWidth;\n            ctx.strokeStyle = this.color.complement;\n            ctx.stroke();\n        }\n\n        for (let i = 0, len = drawSteps.length; i < len; i++) {\n            const step = Object.keys(drawSteps[i]);\n            const stepParams = Object.values(drawSteps[i])[0];\n            ctx[step](...stepParams);\n        }\n\n        ctx.strokeStyle = this.color.color;\n        ctx.lineWidth = chevronWidth;\n        ctx.stroke();\n    }\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Chevron.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "Chevron",
    "memberof": "src/divisions/Chevron.js",
    "static": true,
    "longname": "src/divisions/Chevron.js~Chevron",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Chevron.js",
    "importStyle": "Chevron",
    "description": "Chevron pattern.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Chevron pattern describes two diagonal lines beginning from two corners and stopping in the center of the field where they meet."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      },
      {
        "tagName": "@namespace",
        "tagValue": "Divisions.Chevron"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#constructor",
    "access": "public",
    "description": "Creates a Chevron.",
    "examples": [
      "// Creates a horizontally oriented, white Pall with a black border.\nconst pall = new Pall('fesswise', '#ffffff', true, 20, '#000000');"
    ],
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The orientation of the Pall. One of: fesswise, palewise, fesswiseReversed, palewiseReverse."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color string."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "A width value for drawing the division."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "border",
        "description": "Whether or not to draw a border around the Pall."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "borderWidth",
        "description": "The width of the border."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "borderColor",
        "description": "A hexadecimal color string."
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "border",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#border",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "width",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#width",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "direction",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#direction",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "borderWidth",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#borderWidth",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "borderColor",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#borderColor",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "generateDirection",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#generateDirection",
    "access": "public",
    "description": "Generate a direction value for the Chevron.",
    "examples": [
      "// Returns 'palewiseReversed'\nconst newChevron = new Chevron();\nnewPale.generateDirection(.1337)"
    ],
    "lineNumber": 53,
    "todo": [
      "Rethink the directions, use some kind of probability or something more elegant than this."
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - One of: 'pallwise', 'fesswise', 'pallwiseReversed', 'fesswiseReversed'."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The seed number used for generated values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "One of: 'pallwise', 'fesswise', 'pallwiseReversed', 'fesswiseReversed'."
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "drawInstructions",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#drawInstructions",
    "access": "public",
    "description": "Returns the proper draw function instructions for a given direction.",
    "examples": [
      "// Returns drawInstructionsPalewise();\nconst chevron = new Chevron();\nchevron.drawInstructions('palewise');"
    ],
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} The draw instruction function corresponding to the direction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "One of: 'fesswise', 'palewise', 'fesswiseReversed', 'palewiseReversed'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The draw instruction function corresponding to the direction."
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "drawInstructionsPalewise",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#drawInstructionsPalewise",
    "access": "public",
    "description": "Generates the draw instructions for the palewise and palewiseReversed directions.",
    "examples": [
      "// Returns an instruction set for the palewise direction based on the flag dimensions.\n// [\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {lineTo: [x, y]},\n// ]\nconst chevron = new Chevron();\nconst instructions = chevron.drawInstructionsPalewise();"
    ],
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of objects containing canvas drawing instructions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reversed",
        "description": "Whether or not to return the reverse draw instructions."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of objects containing canvas drawing instructions."
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "drawInstructionsFesswise",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#drawInstructionsFesswise",
    "access": "public",
    "description": "Generates the draw instructions for the fesswise and fesswiseReversed directions.",
    "examples": [
      "// Returns an instruction set for the fesswise direction based on the flag dimensions.\n// [\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {lineTo: [x, y]},\n// ]\nconst chevron = new Chevron();\nconst instructions = chevron.drawInstructionsFesswise();"
    ],
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of objects containing canvas drawing instructions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reversed",
        "description": "Whether or not to return the reverse draw instructions."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of objects containing canvas drawing instructions."
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Chevron.js~Chevron",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Chevron.js~Chevron#draw",
    "access": "public",
    "description": "Draws the Chevron division on a canvas.",
    "examples": [
      "// Draws the Chevron division on the canvas.\nconst chevron = new Chevron();\nchevron.draw(ctx);"
    ],
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "An object containing a canvas context."
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/divisions/Cross.js",
    "content": "import Division from '../division';\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\n\n/**\n * Cross pattern.\n *\n * @class\n * @classdesc The Cross pattern describes two intersecting divisions of the field.\n * @augments Division\n * @namespace Divisions.Pales\n */\nexport default class Cross extends Division {\n\n  constructor(params = {crossType, color, width, border: false, borderWidth, borderColor}) {\n    const count = 1;\n    const limit = 1;\n    super({seed: params.seed, count, limit, color: params.color});\n    this.crossType = typeof params.crossType !== 'undefined' ? params.crossType : this.generateCrossType(this.seed, this.seedMultiplier);\n    this.crossWidth = params.width || this.generateCrossWidth(this.seed, this.seedMultiplier);\n    this.border = params.border;\n    this.borderWidth = params.borderWidth || this.generateBorderWidth(this.seed + this.seedMultiplier); // @todo Generate a border width\n    // this.borderColor = params.border !== false ?\n    this.borderColor = Utilities.generateColor(params.borderColor) || Utilities.generateColor(undefined, this.seed * this.seedMultiplier, this.seedMultiplier);\n  }\n\n  /**\n   * Generates a \"crossType\" string.\n   *\n   * @example\n   * // Returns 'greek'.\n   * const newCross = new Cross();\n   * newCross.generateCrossType(.123, .1);\n   * @param {number} seed - A number less than one and more than 0 is expected.\n   * @param {number} seedMultiplier - A number less than one and more than 0 is expected.\n   * @returns {string} One of the available crossTypes: nordic, greek, symmetric.\n   */\n  generateCrossType(seed, seedMultiplier) {\n    const crossTypes = ['nordic', 'greek', 'symmetric']\n    // Generate a number between 0 & 2 to choose from the list of crossTypes.\n    let choice = (seed * seedMultiplier * seed);\n    let returnedChoice;\n    // Let's be weird and loop over every digit in the multiplier and pick the last 0, 1, or 2.\n    ('' + choice).split('').map((v, i) => {\n      if (parseInt(v) === 0 || parseInt(v) === 1 || parseInt(v) === 2) {\n        returnedChoice = crossTypes[parseInt(v)];\n      }\n    })\n    return returnedChoice;\n  }\n\n  generateCrossWidth(seed, seedMultiplier) {\n    const funcSeed = seed || this.seed;\n    const funcSeedMultiplier = seedMultiplier || this.seedMultiplier;\n    let width;\n    width = Math.ceil(Utilities.modifySeed(funcSeed, funcSeedMultiplier) * 100) + 1; // Add one so we never have 0.\n    if (width >= 100) {\n      width = width / 2; // Cap width at 100, any larger and we lose the shape.\n    }\n    return width;\n  }\n\n  generateBorderWidth() {\n    return this.crossWidth + (this.crossWidth * .6); // Return a border that's +6% of the cross' width.\n  }\n\n  draw(ctx) {\n    switch(this.crossType) {\n    case 'nordic':\n      this.drawNordicCross(ctx);\n      break;\n    case 'greek':\n      this.drawGreekCross(ctx);\n      break;\n    case 'symmetric':\n      this.drawSymmetricCross(ctx);\n      break;\n    }\n  }\n\n  drawNordicCross(ctx) {\n\n    const drawCross = (width, color) => {\n      ctx.beginPath();\n      // straight across.\n      ctx.moveTo(0, settings.flagHeight/2);\n      ctx.lineTo(settings.flagWidth, settings.flagHeight/2);\n      // the vertical line.\n      ctx.moveTo(settings.flagWidth / 3, 0);\n      ctx.lineTo(settings.flagWidth / 3, settings.flagHeight);\n\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n    }\n\n    if (this.border === true && this.borderWidth > 0 && /^#/.test(this.borderColor.color)) {\n      drawCross(this.borderWidth, this.borderColor.color);\n      drawCross(this.crossWidth, this.color.color);\n    } else {\n      drawCross(this.crossWidth, this.color.color);\n    }\n\n  }\n\n  drawGreekCross(ctx) {\n    const lineLength = Utilities.findGreaterNumber(settings.flagWidth, settings.flagHeight) * .20; // 20% of either the flag height or width, whichever is greater.\n    const borderLineLength = (lineLength + (this.borderWidth / 12)); // Divide by twelve because that's the number of edges.\n\n    const drawCross = (width, color, extra = 0) => {\n      ctx.beginPath();\n      ctx.moveTo(settings.flagWidth / 2, settings.flagHeight/2); // move to center.\n      ctx.lineTo((settings.flagWidth / 2) - (extra + +(extra - lineLength)), (settings.flagHeight / 2));\n      ctx.moveTo(settings.flagWidth / 2, settings.flagHeight/2); // move to center.\n      ctx.lineTo((settings.flagWidth / 2) + (extra + +(extra - lineLength)), (settings.flagHeight / 2));\n      ctx.moveTo(settings.flagWidth / 2, settings.flagHeight / 2); // move to center.\n      ctx.lineTo((settings.flagWidth / 2), (settings.flagHeight / 2) - (extra + +(extra - lineLength)));\n      ctx.moveTo(settings.flagWidth / 2, settings.flagHeight / 2); // move to center.\n      ctx.lineTo((settings.flagWidth / 2), (settings.flagHeight / 2) + (extra + +(extra - lineLength)));\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n    }\n\n    if (this.border === true && this.borderWidth > 0 && /^#/.test(this.borderColor.color)) {\n      drawCross(this.borderWidth, this.borderColor.color, borderLineLength);\n      drawCross(this.crossWidth, this.color.color);\n    } else {\n      drawCross(this.crossWidth, this.color.color);\n    }\n\n  }\n\n  drawSymmetricCross(ctx) {\n\n    const drawCross = (width, color) => {\n      ctx.beginPath();\n      // straight across.\n      ctx.moveTo(0, settings.flagHeight/2);\n      ctx.lineTo(settings.flagWidth, settings.flagHeight/2);\n      // the vertical line.\n      ctx.moveTo(settings.flagWidth / 2, 0);\n      ctx.lineTo(settings.flagWidth / 2, settings.flagHeight);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = width;\n      ctx.stroke();\n    }\n\n    if (this.border === true && this.borderWidth > 0 && /^#/.test(this.borderColor.color)) {\n      drawCross(this.borderWidth, this.borderColor.color);\n      drawCross(this.crossWidth, this.color.color);\n    } else {\n      drawCross(this.crossWidth, this.color.color);\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Cross.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "class",
    "name": "Cross",
    "memberof": "src/divisions/Cross.js",
    "static": true,
    "longname": "src/divisions/Cross.js~Cross",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Cross.js",
    "importStyle": "Cross",
    "description": "Cross pattern.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Cross pattern describes two intersecting divisions of the field."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      },
      {
        "tagName": "@namespace",
        "tagValue": "Divisions.Pales"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "crossType",
    "memberof": "src/divisions/Cross.js~Cross",
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#crossType",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "crossWidth",
    "memberof": "src/divisions/Cross.js~Cross",
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#crossWidth",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "border",
    "memberof": "src/divisions/Cross.js~Cross",
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#border",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "borderWidth",
    "memberof": "src/divisions/Cross.js~Cross",
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#borderWidth",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "borderColor",
    "memberof": "src/divisions/Cross.js~Cross",
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#borderColor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "generateCrossType",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#generateCrossType",
    "access": "public",
    "description": "Generates a \"crossType\" string.",
    "examples": [
      "// Returns 'greek'.\nconst newCross = new Cross();\nnewCross.generateCrossType(.123, .1);"
    ],
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} One of the available crossTypes: nordic, greek, symmetric."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "A number less than one and more than 0 is expected."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seedMultiplier",
        "description": "A number less than one and more than 0 is expected."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "One of the available crossTypes: nordic, greek, symmetric."
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "generateCrossWidth",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#generateCrossWidth",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "seed",
        "types": [
          "*"
        ]
      },
      {
        "name": "seedMultiplier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "generateBorderWidth",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#generateBorderWidth",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#draw",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "drawNordicCross",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#drawNordicCross",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "drawGreekCross",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#drawGreekCross",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "drawSymmetricCross",
    "memberof": "src/divisions/Cross.js~Cross",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Cross.js~Cross#drawSymmetricCross",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/divisions/Cross.test.js",
    "content": "import Cross from './Cross.js';\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\nimport 'jest-canvas-mock';\n\nlet canvas;\nlet ctx;\n// Mock the canvas.\ncanvas = document.createElement('canvas');\ncanvas.width = 500;\ncanvas.height = 300;\nctx = canvas.getContext('2d');\nsettings.flagHeight = 300;\nsettings.flagWidth = 500;\n\ndescribe('Cross class', () => {\n  Utilities.generateSeed('test');\n  // 0.8722025543160253\n\n  it('should be instantiated given all possible options', () => {\n    const newCross = new Cross('nordic', '#ffffff');\n    expect(newCross.crossType).toBe('nordic');\n    expect(newCross.color.color).toBe('#ffffff');\n  });\n\n  it('should be instantiated given no options', () => {\n    const newCross = new Cross();\n    expect(newCross.crossType).toBe('symmetric');\n    expect(newCross.color.color).toBe('#82b431');\n    expect(newCross.crossWidth).toBe(53);\n  });\n\n  describe('should provide a generateCrossType() method', () => {\n    const newCross = new Cross();\n\n    it('which returns a reproducable number given the same input', () => {\n      expect(newCross.generateCrossWidth(newCross.seed, newCross.seedMultiplier)).toBe(53);\n    });\n\n  });\n\n  describe('should provide a draw() method', () => {\n    let newCross;\n    let events;\n    it('which draws the appropriate cross on the canvas by calling the appropriate draw method.', () => {\n      // ctx.__clearEvents();\n      newCross = new Cross('nordic', '#ffffff', 20, false, 0, '#000000');\n      newCross.draw(ctx);\n      events = ctx.__getEvents();\n      expect(events).toBeDefined;\n      expect(events.length).toBeGreaterThan(0);\n      for (let i = 1; i < events.length; i++) {\n        switch(i) {\n        case 1:\n          expect(events[i].props.x).toBe(0);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 2:\n          expect(events[i].props.x).toBe(500);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 3:\n          expect(events[i].props.x).toBeGreaterThan(166.6);\n          expect(events[i].props.x).toBeLessThan(166.7);\n          expect(events[i].props.y).toBe(0);\n          break;\n        case 4:\n          expect(events[i].props.x).toBeGreaterThan(166.6);\n          expect(events[i].props.x).toBeLessThan(166.7);\n          expect(events[i].props.y).toBe(300);\n          break;\n        }\n      }\n\n      ctx.__clearEvents();\n      newCross = new Cross('greek');\n      newCross.draw(ctx);\n      events = ctx.__getEvents();\n      expect(events).toBeDefined;\n      expect(events.length).toBeGreaterThan(0);\n      for (let i = 1; i < events.length; i++) {\n        switch(i) {\n        case 1:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 2:\n          expect(events[i].props.x).toBe(350);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 3:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 4:\n          expect(events[i].props.x).toBe(150);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 5:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 6:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(250);\n          break;\n        case 7:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 8:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(50);\n          break;\n\n        }\n      }\n\n      ctx.__clearEvents();\n      newCross = new Cross('symmetric');\n      newCross.draw(ctx);\n      events = ctx.__getEvents();\n      expect(events).toBeDefined;\n      expect(events.length).toBeGreaterThan(0);\n      for (let i = 1; i < events.length; i++) {\n        switch(i) {\n        case 1:\n          expect(events[i].props.x).toBe(0);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 2:\n          expect(events[i].props.x).toBe(500);\n          expect(events[i].props.y).toBe(150);\n          break;\n        case 3:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(0);\n          break;\n        case 4:\n          expect(events[i].props.x).toBe(250);\n          expect(events[i].props.y).toBe(300);\n          break;\n        }\n      }\n\n    });\n\n  });\n\n\n\n});\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Cross.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "src/divisions/Fesses.js",
    "content": "/**\n * @file Houses the class properties and methods for the Fesses division.\n */\nimport Division from '../division';\n\n/**\n * Fesses pattern.\n *\n * @class\n * @classdesc The Fesses pattern describes one or more vertical divisions of the field.\n * @augments Division\n */\nexport default class Fesses extends Division {\n  /**\n   * Create fesses.\n   *\n   * @example\n   * // Returns a Fesses instance.\n   * const fesses = new Fesses(2, '#3febeb');\n   * @param {number} gapPercentage - A whole number representing a percentage of the containerWidth. Used to place gaps during draw time.\n   * @param {string} color - A hexadecimal color string.\n   * @todo Switch up the draw function to use draw instructions in the same way as the Pall division.\n   */\n  constructor(params = {seed, count, gapPercentage, color}) {\n    const limit = 3;\n    super({seed: params.seed, count: params.count, limit, color: params.color});\n    this.gapPercentage = params.gapPercentage || 0;\n  }\n    /**\n     * Draw Fesses on a canvas.\n     *\n     * @example\n     * // Draws a Fesses instance on a canvas.\n     * fesses.drawFesses(ctx, 500);\n     * @param {object} ctx - A canvas Context.\n     * @param {number} containerWidth - The width of the area on which to draw Fesses.\n     * @param {number} gapPercentage - A whole number representing a percentage of the containerWidth.\n     * @todo  The gapPercentage cannot exceed a certain value, but I don't know how to calculate a stop. Keep it below 20. It's probably something like: the gap percentage cannot exceed a certain value based on the number of gaps.\n     */\n    draw(ctx, containerWidth = 500, gapPercentage = this.gapPercentage) {\n        let singleGapWidth,\n            singleGapPercentage,\n            totalGapPercent,\n            numGaps,\n            singleFessWidthPercentage,\n            singleFessWidth,\n            remainingContainerWidth;\n\n        // If we're only drawing 1 division, center it.\n        if (this.count === 1) {\n            gapPercentage = 33;\n        }\n        // What percentage of the whole WIDTH should each fess take up?\n        singleFessWidthPercentage = ((100 / this.count)) / 100;\n        // Given the current count of Fesses, how many gaps are there? One on each side and N gaps between.\n        numGaps = (this.count * 2) - (this.count - 1); // I don't remember how I arrived at this, but it seems correct.\n        // Turn our whole number gapPercentage into a decimal for math.\n        singleGapPercentage = gapPercentage / 100; // Divide the whole number value by 100 to get a decimal.\n        // Get the total % of the container width taken up by gaps.\n        totalGapPercent = singleGapPercentage * numGaps; // Multiply the decimal from above by the number of gaps to get a total % value of the whole. Useful for later.\n        // How wide is a single gap?\n        singleGapWidth = (containerWidth * singleGapPercentage);\n        // How much of the flag is left for Fesses after we draw gaps?\n        remainingContainerWidth = containerWidth - (totalGapPercent * containerWidth);\n        // Calculate the width of a single Fess by multiplying the fess width percentage by the remaining flag width.\n        singleFessWidth = (singleFessWidthPercentage * remainingContainerWidth);\n\n        // Figure out x/y coordinates for each fess\n        let incrementXpos = singleGapWidth;\n        for (let i = 0; i < this.count; i++) {\n            // ctx.fillStyle = randomHex(settings.seed, i + 2); // @TODO: Handle color more elegantly, I'd like the colors to be complimentary.\n            switch (this.count) {\n                case 1:\n                    ctx.fillStyle = this.color.color;\n                    break;\n                case 2:\n                    ctx.fillStyle = i === 0 ? this.color.color : this.color.complement;\n                    break;\n                case 3:\n                    ctx.fillStyle = this.color.triad[i];\n                    break;\n                case 4:\n                    ctx.fillStyle = this.color.tetrad[i]\n                    break;\n                default:\n                    ctx.fillStyle = this.color.monochromatic[i];\n                    break;\n            }\n            let ypos = 0; // start at the top always\n            let xpos = incrementXpos;\n            let w = singleFessWidth;\n            let h = 300;\n            incrementXpos = incrementXpos + singleFessWidth + singleGapWidth;\n            ctx.fillRect(xpos, ypos, w, h);\n        }\n\n    }\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Fesses.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "Fesses",
    "memberof": "src/divisions/Fesses.js",
    "static": true,
    "longname": "src/divisions/Fesses.js~Fesses",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Fesses.js",
    "importStyle": "Fesses",
    "description": "Fesses pattern.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Fesses pattern describes one or more vertical divisions of the field."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Fesses.js~Fesses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Fesses.js~Fesses#constructor",
    "access": "public",
    "description": "Create fesses.",
    "examples": [
      "// Returns a Fesses instance.\nconst fesses = new Fesses(2, '#3febeb');"
    ],
    "lineNumber": 24,
    "todo": [
      "Switch up the draw function to use draw instructions in the same way as the Pall division."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gapPercentage",
        "description": "A whole number representing a percentage of the containerWidth. Used to place gaps during draw time."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color string."
      }
    ]
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "gapPercentage",
    "memberof": "src/divisions/Fesses.js~Fesses",
    "static": false,
    "longname": "src/divisions/Fesses.js~Fesses#gapPercentage",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Fesses.js~Fesses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Fesses.js~Fesses#draw",
    "access": "public",
    "description": "Draw Fesses on a canvas.",
    "examples": [
      "// Draws a Fesses instance on a canvas.\nfesses.drawFesses(ctx, 500);"
    ],
    "lineNumber": 40,
    "todo": [
      " The gapPercentage cannot exceed a certain value, but I don't know how to calculate a stop. Keep it below 20. It's probably something like: the gap percentage cannot exceed a certain value based on the number of gaps."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "A canvas Context."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "containerWidth",
        "description": "The width of the area on which to draw Fesses."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gapPercentage",
        "description": "A whole number representing a percentage of the containerWidth."
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/divisions/Fusil.js",
    "content": "import Division from '../division';\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\n\nexport default class Fusil extends Division {\n\n  constructor(params = {seed, color}) {\n    const count = 1;\n    const limit = 1;\n    super({seed: params.seed, count, limit, color: params.color});\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.moveTo(settings.flagWidth / 2, 0); // top center\n    ctx.lineTo(settings.flagWidth - (settings.flagWidth / 4), settings.flagHeight / 2); // right center\n    ctx.lineTo(settings.flagWidth / 2, settings.flagHeight); // bottom center\n    ctx.lineTo(0 + (settings.flagWidth / 4), settings.flagHeight / 2); // left center\n    ctx.fillStyle = this.color.color;\n    ctx.fill();\n  }\n\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Fusil.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "Fusil",
    "memberof": "src/divisions/Fusil.js",
    "static": true,
    "longname": "src/divisions/Fusil.js~Fusil",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Fusil.js",
    "importStyle": "Fusil",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Fusil.js~Fusil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Fusil.js~Fusil#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Fusil.js~Fusil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Fusil.js~Fusil#draw",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/divisions/Fusil.test.js",
    "content": "import Fusil from './Fusil';\n\ndescribe('Fusil class', () => {\n  const fusilWithOptions = new Fusil('#ffffff');\n  const fusilNoOptions = new Fusil();\n\n  it('should instantiate when given all possible parameters', () => {\n    expect(typeof fusilWithOptions.color).toBe('object');\n    expect(fusilWithOptions.color.color).toBe('#ffffff');\n  });\n\n  it('should instantiate when given all possible parameters', () => {\n    expect(typeof fusilNoOptions.color).toBe('object');\n    expect(fusilNoOptions.color.color.length).toBeGreaterThan(0);\n  });\n\n});\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Fusil.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/divisions/Lozenge.js",
    "content": "import Division from '../division';\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\n\nexport default class Lozenge extends Division {\n\n  constructor(params = {seed, color}) {\n    const count = 1;\n    const limit = 1;\n    super({seed: params.seed, count, limit, color: params.color});\n  }\n\n  draw(ctx) {\n    ctx.beginPath();\n    ctx.moveTo(settings.flagWidth / 2, 0); // top center\n    ctx.lineTo(settings.flagWidth, settings.flagHeight / 2); // right center\n    ctx.lineTo(settings.flagWidth / 2, settings.flagHeight); // bottom center\n    ctx.lineTo(0, settings.flagHeight / 2); // left center\n    ctx.fillStyle = this.color.color;\n    ctx.fill();\n  }\n\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Lozenge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "Lozenge",
    "memberof": "src/divisions/Lozenge.js",
    "static": true,
    "longname": "src/divisions/Lozenge.js~Lozenge",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Lozenge.js",
    "importStyle": "Lozenge",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Lozenge.js~Lozenge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Lozenge.js~Lozenge#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Lozenge.js~Lozenge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Lozenge.js~Lozenge#draw",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/divisions/Lozenge.test.js",
    "content": "import Lozenge from './Lozenge';\n\ndescribe('Lozenge class', () => {\n  const fusilWithOptions = new Lozenge('#ffffff');\n  const fusilNoOptions = new Lozenge();\n\n  it('should instantiate when given all possible parameters', () => {\n    expect(typeof fusilWithOptions.color).toBe('object');\n    expect(fusilWithOptions.color.color).toBe('#ffffff');\n  });\n\n  it('should instantiate when given all possible parameters', () => {\n    expect(typeof fusilNoOptions.color).toBe('object');\n    expect(fusilNoOptions.color.color.length).toBeGreaterThan(0);\n  });\n\n});\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Lozenge.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/divisions/Pales.js",
    "content": "/**\n * @file Houses the class properties and methods for the Pales division.\n */\nimport settings from '../settings';\nimport Division from '../division';\n\n/** Pales pattern.\n *\n * @class\n * @classdesc The Pales pattern describes one or more horizontal divisions of the field.\n * @augments Division\n * @namespace Divisions.Pales\n */\nexport default class Pales extends Division {\n    /**\n     * Instantiates a Pales pattern.\n     *\n     * @example\n     * // Instantiates a Pales pattern.\n     * const pales = new Pales()\n     * @param {number} count - The number of Pales in this instance.\n     * @param {number} gapPercentage - A whole number representing a percentage of the containerWidth. Used to place gaps during draw time.\n     * @param {string} color - A hexadecimal color string.\n     * @todo The count limit of 3 is only here because I can't figure out a way\n     *       to make 4 consistently look good. It always comes out like a rainbow\n     *       or a monochrome step.\n     */\n  constructor(params = {count, gapPercentage, color}) {\n    const limit = 3; // No more than 3 Pales per instance.\n    super({seed: params.seed, count: params.count, limit, color: params.color});\n    this.gapPercentage = params.gapPercentage || 0;\n  }\n    draw(ctx, containerWidth = settings.flagWidth, containerHeight = settings.flagHeight, gapPercentage = this.gapPercentage) {\n        let singleGapHeight,\n            singleGapPercentage,\n            totalGapPercent,\n            numGaps,\n            singlePaleHeightPercentage,\n            singlePaleHeight,\n            remainingContainerHeight;\n\n        // If we're only generating one Pale, let's center it.\n        if (this.count === 1) {\n            gapPercentage = 33;\n        }\n\n        // What percentage of the whole WIDTH should each pale take up?\n        singlePaleHeightPercentage = ((100 / this.count)) / 100;\n        // Given the current count of pales, how many gaps are there? One on each side and N gaps between.\n        numGaps = (this.count * 2) - (this.count - 1); // I don't remember how I arrived at this, but it seems correct.\n        // Turn our whole number gapPercentage into a decimal for math.\n        singleGapPercentage = gapPercentage / 100; // Divide the whole number value by 100 to get a decimal.\n        // Get the total % of the container width taken up by gaps.\n        totalGapPercent = singleGapPercentage * numGaps; // Multiply the decimal from above by the number of gaps to get a total % value of the whole. Useful for later.\n        // How wide is a single gap?\n        singleGapHeight = (containerHeight * singleGapPercentage);\n        // How much of the flag is left for pales after we draw gaps?\n        remainingContainerHeight = containerHeight - (totalGapPercent * containerHeight);\n        // Calculate the width of a single pale by multiplying the fess width percentage by the remaining flag width.\n        singlePaleHeight = (singlePaleHeightPercentage * remainingContainerHeight);\n\n        // Figure out x/y coordinates for each pale\n        let incrementYpos = singleGapHeight;\n        for (let i = 0; i < this.count; i++) {\n            // ctx.fillStyle = randomHex(settings.seed, i + 2); // @TODO: Handle color more elegantly, I'd like the colors to be complimentary.\n            // ctx.fillStyle = this.generateColor(settings.seed, (i + .527)); // @TODO: Handle color more elegantly, I'd like the colors to be complimentary.\n            switch (this.count) {\n                case 1:\n                    ctx.fillStyle = this.color.color;\n                    break;\n                case 2:\n                    ctx.fillStyle = i === 0 ? this.color.color : this.color.complement;\n                    break;\n                case 3:\n                    ctx.fillStyle = this.color.triad[i];\n                    break;\n                case 4:\n                    ctx.fillStyle = this.color.tetrad[i]\n                    break;\n                default:\n                    ctx.fillStyle = this.color.monochromatic[i];\n                    break;\n            }\n            let ypos = incrementYpos; // start at the top always\n            let xpos = 0;\n            let w = containerWidth;\n            let h = singlePaleHeight;\n            incrementYpos = incrementYpos + singlePaleHeight + singleGapHeight;\n            ctx.fillRect(xpos, ypos, w, h);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Pales.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "Pales",
    "memberof": "src/divisions/Pales.js",
    "static": true,
    "longname": "src/divisions/Pales.js~Pales",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Pales.js",
    "importStyle": "Pales",
    "description": "Pales pattern.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Pales pattern describes one or more horizontal divisions of the field."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      },
      {
        "tagName": "@namespace",
        "tagValue": "Divisions.Pales"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Pales.js~Pales",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pales.js~Pales#constructor",
    "access": "public",
    "description": "Instantiates a Pales pattern.",
    "examples": [
      "// Instantiates a Pales pattern.\nconst pales = new Pales()"
    ],
    "lineNumber": 28,
    "todo": [
      "The count limit of 3 is only here because I can't figure out a way\n      to make 4 consistently look good. It always comes out like a rainbow\n      or a monochrome step."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "The number of Pales in this instance."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gapPercentage",
        "description": "A whole number representing a percentage of the containerWidth. Used to place gaps during draw time."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color string."
      }
    ]
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "gapPercentage",
    "memberof": "src/divisions/Pales.js~Pales",
    "static": false,
    "longname": "src/divisions/Pales.js~Pales#gapPercentage",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Pales.js~Pales",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pales.js~Pales#draw",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "containerWidth",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "containerHeight",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "gapPercentage",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/divisions/Pall.js",
    "content": "/**\n * @file Houses the class properties and methods for the Pall division.\n */\nimport * as Utilities from '../utilities';\nimport settings from '../settings';\nimport Division from '../division';\n\n/** Pall pattern.\n *\n * @class\n * @classdesc The Pall pattern describes a Y shape on the field, typically oriented so the top of the Y is on the left of the field.\n * @augments Division\n * @namespace Divisions.Pall\n */\nexport default class Pall extends Division {\n    /**\n     * Creates a Pall.\n     *\n     * @example\n     * // Creates a horizontally oriented, white Pall with a black border.\n     * const pall = new Pall('fesswise', '#ffffff', true, 20, '#000000');\n     * @param {string} direction - The orientation of the Pall. One of: fesswise, palewise, fesswiseReversed, palewiseReverse.\n     * @param {string} color - A hexadecimal color string.\n     * @param {number} width - A width value for drawing the division.\n     * @param {boolean} border - Whether or not to draw a border around the Pall.\n     * @param {number} borderWidth - The width of the border.\n     * @param {string} borderColor - A hexadecimal color string.\n     */\n  constructor(params = {seed, direction, color, width, border, borderWidth, borderColor}) {\n    super({seed: params.seed, count: 1, limit: 1, color: params.color});\n    this.border = params.border;\n    this.width = params.width;\n    this.direction = typeof params.direction !== 'undefined' ? params.direction : this.generateDirection();\n    // this.borderWidth = borderWidth > 0 ? borderWidth : this.generateSaltireWidth((settings.seed * .1234));\n    this.borderWidth = params.borderWidth || 50;\n    this.borderColor = params.borderColor || Utilities.generateColor(undefined, .12345);\n  }\n    /**\n     * Generate a direction value for the Pall.\n     *\n     * @example\n     * // Returns 'palewiseReversed'\n     * const newPale = new Pale();\n     * newPale.generateDirection(.1337)\n     * @param {number} seed - The seed number used for generated values.\n     * @returns {string} - One of: 'pallwise', 'fesswise', 'pallwiseReversed', 'fesswiseReversed'.\n     */\n    generateDirection(seed = this.seed) {\n        let generated;\n        // let seedDigit = +(Math.round(this.seed * this.seedMultiplier).toString().substr(-1));\n        const seedDigit = Utilities.getLastDigit(Utilities.modifySeed(this.seed, this.seedMultiplier));\n        if (seedDigit >=1 && seedDigit <= 4) {\n            generated = 'palewise';\n        } else if (seedDigit === 5 || seedDigit === 6) {\n            generated = 'fesswise';\n        } else if (seedDigit === 7 || seedDigit === 8) {\n            generated = 'palewiseReversed';\n        } else if (seedDigit === 0 || seedDigit === 9) {\n            generated = 'fesswiseReversed';\n        }\n        return generated;\n    }\n\n    /**\n     * Returns the proper draw function instructions for a given direction.\n     *\n     * @example\n     * // Returns drawInstructionsPalewise();\n     * const pall = new Pall();\n     * pall.drawInstructions('palewise');\n     * @param {string} direction - One of: 'fesswise', 'palewise', 'fesswiseReversed', 'palewiseReversed'.\n     * @returns {Function} The draw instruction function corresponding to the direction.\n     */\n    drawInstructions(direction) {\n        let instructions;\n        switch (direction) {\n            case 'palewise':\n                instructions = this.drawInstructionsPalewise();\n                break;\n            case 'palewiseReversed':\n                instructions = this.drawInstructionsPalewise(true);\n                break;\n            case 'fesswise':\n                instructions = this.drawInstructionsFesswise();\n                break;\n            case 'fesswiseReversed':\n                instructions = this.drawInstructionsFesswise(true);\n                break;\n        }\n        return instructions;\n    }\n\n    /**\n     * Generates the draw instructions for the palewise and palewiseReversed directions.\n     *\n     * @example\n     * // Returns an instruction set for the palewise direction based on the flag dimensions.\n     * // [\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * // ]\n     * const pall = new Pall();\n     * const instructions = pall.drawInstructionsPalewise();\n     * @param {boolean} reversed - Whether or not to return the reverse draw instructions.\n     * @returns {Array} An array of objects containing canvas drawing instructions.\n     */\n    drawInstructionsPalewise(reversed) {\n        let instructions;\n        if (!reversed) {\n            instructions = [\n                {moveTo: [0, 0]},\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]},\n                {lineTo: [0, settings.flagHeight]},\n                {moveTo: [settings.flagWidth / 2, settings.flagHeight / 2]},\n                {lineTo: [settings.flagWidth, settings.flagHeight / 2]},\n            ]\n        } else {\n            instructions = [\n                {moveTo: [settings.flagWidth, 0]}, // start top-right\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n                {lineTo: [settings.flagWidth, settings.flagHeight]}, // draw to bottom right\n                {moveTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // move to center\n                {lineTo: [0, settings.flagHeight / 2]}, // Draw to center left side\n            ]\n        }\n\n        return instructions;\n    }\n    /**\n     * Generates the draw instructions for the fesswise and fesswiseReversed directions.\n     *\n     * @example\n     * // Returns an instruction set for the fesswise direction based on the flag dimensions.\n     * // [\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * //     {moveTo: [x, y]},\n     * //     {lineTo: [x, y]},\n     * // ]\n     * const pall = new Pall();\n     * const instructions = pall.drawInstructionsFesswise();\n     * @param {boolean} reversed - Whether or not to return the reverse draw instructions.\n     * @returns {Array} An array of objects containing canvas drawing instructions.\n     */\n    drawInstructionsFesswise(reversed) {\n        let instructions;\n        if (!reversed) {\n            instructions = [\n                {moveTo: [0, 0]}, // start top left\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n                {lineTo: [settings.flagWidth, 0]}, // draw to top right\n                {moveTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // move to center\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight]}, // draw to center bottom\n            ];\n        } else {\n            instructions = [\n                {moveTo: [0, settings.flagHeight]}, // start bottom left\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // draw to center\n                {lineTo: [settings.flagWidth, settings.flagHeight]}, // draw to bottom right\n                {moveTo: [settings.flagWidth / 2, settings.flagHeight / 2]}, // move to center\n                {lineTo: [settings.flagWidth / 2, settings.flagHeight - settings.flagHeight]}, // draw to center top\n            ];\n        }\n        return instructions;\n    }\n\n    /**\n     * Draws the Pall pattern on a canvas.\n     *\n     * @example\n     * // Draws the Pall pattern.\n     * pall.draw(ctx);\n     * @param {object} ctx - An object containing a canvas context.\n     */\n    draw(ctx) {\n        const drawSteps = this.drawInstructions(this.direction);\n        const pallWidth = this.width || Math.round(this.seed * 100);\n        ctx.beginPath();\n        // If there's a border, draw it first with a larger width.\n        if (this.border) {\n            for (let i = 0, len = drawSteps.length; i < len; i++) {\n                const step = Object.keys(drawSteps[i]);\n                const stepParams = Object.values(drawSteps[i])[0];\n                ctx[step](...stepParams);\n            }\n            ctx.lineWidth = pallWidth + this.borderWidth;\n            ctx.strokeStyle = this.color.complement;\n            ctx.stroke();\n        }\n\n        for (let i = 0, len = drawSteps.length; i < len; i++) {\n            const step = Object.keys(drawSteps[i]);\n            const stepParams = Object.values(drawSteps[i])[0];\n            ctx[step](...stepParams);\n        }\n        ctx.strokeStyle = this.color.color;\n        ctx.lineWidth = pallWidth;\n        ctx.stroke();\n    }\n}\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Pall.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "class",
    "name": "Pall",
    "memberof": "src/divisions/Pall.js",
    "static": true,
    "longname": "src/divisions/Pall.js~Pall",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Pall.js",
    "importStyle": "Pall",
    "description": "Pall pattern.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Pall pattern describes a Y shape on the field, typically oriented so the top of the Y is on the left of the field."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      },
      {
        "tagName": "@namespace",
        "tagValue": "Divisions.Pall"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 137,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Pall.js~Pall",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#constructor",
    "access": "public",
    "description": "Creates a Pall.",
    "examples": [
      "// Creates a horizontally oriented, white Pall with a black border.\nconst pall = new Pall('fesswise', '#ffffff', true, 20, '#000000');"
    ],
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "The orientation of the Pall. One of: fesswise, palewise, fesswiseReversed, palewiseReverse."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color string."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "A width value for drawing the division."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "border",
        "description": "Whether or not to draw a border around the Pall."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "borderWidth",
        "description": "The width of the border."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "borderColor",
        "description": "A hexadecimal color string."
      }
    ]
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "border",
    "memberof": "src/divisions/Pall.js~Pall",
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#border",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "width",
    "memberof": "src/divisions/Pall.js~Pall",
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#width",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "direction",
    "memberof": "src/divisions/Pall.js~Pall",
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#direction",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "borderWidth",
    "memberof": "src/divisions/Pall.js~Pall",
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#borderWidth",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "borderColor",
    "memberof": "src/divisions/Pall.js~Pall",
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#borderColor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "generateDirection",
    "memberof": "src/divisions/Pall.js~Pall",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#generateDirection",
    "access": "public",
    "description": "Generate a direction value for the Pall.",
    "examples": [
      "// Returns 'palewiseReversed'\nconst newPale = new Pale();\nnewPale.generateDirection(.1337)"
    ],
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - One of: 'pallwise', 'fesswise', 'pallwiseReversed', 'fesswiseReversed'."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The seed number used for generated values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "One of: 'pallwise', 'fesswise', 'pallwiseReversed', 'fesswiseReversed'."
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "drawInstructions",
    "memberof": "src/divisions/Pall.js~Pall",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#drawInstructions",
    "access": "public",
    "description": "Returns the proper draw function instructions for a given direction.",
    "examples": [
      "// Returns drawInstructionsPalewise();\nconst pall = new Pall();\npall.drawInstructions('palewise');"
    ],
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} The draw instruction function corresponding to the direction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "One of: 'fesswise', 'palewise', 'fesswiseReversed', 'palewiseReversed'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The draw instruction function corresponding to the direction."
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "drawInstructionsPalewise",
    "memberof": "src/divisions/Pall.js~Pall",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#drawInstructionsPalewise",
    "access": "public",
    "description": "Generates the draw instructions for the palewise and palewiseReversed directions.",
    "examples": [
      "// Returns an instruction set for the palewise direction based on the flag dimensions.\n// [\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n// ]\nconst pall = new Pall();\nconst instructions = pall.drawInstructionsPalewise();"
    ],
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of objects containing canvas drawing instructions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reversed",
        "description": "Whether or not to return the reverse draw instructions."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of objects containing canvas drawing instructions."
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "drawInstructionsFesswise",
    "memberof": "src/divisions/Pall.js~Pall",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#drawInstructionsFesswise",
    "access": "public",
    "description": "Generates the draw instructions for the fesswise and fesswiseReversed directions.",
    "examples": [
      "// Returns an instruction set for the fesswise direction based on the flag dimensions.\n// [\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {lineTo: [x, y]},\n//     {moveTo: [x, y]},\n//     {lineTo: [x, y]},\n// ]\nconst pall = new Pall();\nconst instructions = pall.drawInstructionsFesswise();"
    ],
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of objects containing canvas drawing instructions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "reversed",
        "description": "Whether or not to return the reverse draw instructions."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of objects containing canvas drawing instructions."
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Pall.js~Pall",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Pall.js~Pall#draw",
    "access": "public",
    "description": "Draws the Pall pattern on a canvas.",
    "examples": [
      "// Draws the Pall pattern.\npall.draw(ctx);"
    ],
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "An object containing a canvas context."
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/divisions/Saltire.js",
    "content": "/**\n * @file Houses the class properties and methods for the Saltire division.\n */\nimport settings from '../settings';\nimport Division from '../division';\n\n/** Saltire pattern.\n *\n * @class\n * @classdesc The Saltire pattern describes two diagonal lines crossing in the center of the field. An X pattern.\n * @augments Division\n */\nclass Saltire extends Division {\n    /**\n     * Creates a Saltire.\n     *\n     * @example\n     * // Instantiates a Saltire without a border.\n     * const saltire = new Saltire();\n     * // Instantiates a Saltire with a border.\n     * const saltireWithBorder = new Saltire(true);\n     * @param {number} count - The number of Saltires in this instance. Should typically only be one.\n     * @param {boolean} border - A boolean value to decide whether or not to draw a border based on the global seed setting.\n     * @param {number} borderWidth - A number value to use when generating border width. This number is used in addition\n     * to the randomly generated border width determined by the seed.\n     * @param {string} color - A hexadecimal color string.\n     * @param {string} borderColor - A hexadecimal color string.\n     */\n  constructor(params = {seed, count, border: false, borderWidth: 0, color, borderColor}) {\n    const limit = 1;\n    super({seed: params.seed, count: params.count, limit, color: params.color});\n    this.border = params.border;\n    this.borderWidth = params.borderWidth > 0 ? params.borderWidth : this.generateSaltireWidth((this.seed * .1234));\n    // this.borderColor = borderColor || this.generateColor(undefined, .12345);\n  }\n    /**\n     * Generates a percentage width for the Saltire lines based on the seed.\n     *\n     * @example\n     * // Returns 81, meaning 81%\n     * saltire.generateWidth(0.8112494706388412);\n     * @param {number} seed - A pseudo-random string generated based on a string value.\n     * @see {@link module:flag-generator/utilities~generateSeed|generateSeed()} for more info about the seed.\n     * @returns {number} A whole number used elsewhere as a percentage value.\n     */\n    generateSaltireWidth(seed = this.seed) {\n        return Math.round(seed * 100);\n    }\n    /**\n     * Generate border information for the Saltire.\n     *\n     * @example\n     * // Returns an object with width and color keys.\n     * const border = this.generateSaltireBorder(.123747918512398745);\n     * @param {number} seed - A pseudo-random string generated based on a string value.\n     * @see {@link module:flag-generator/utilities~generateSeed|generateSeed()} for more info about the seed.\n     * @returns {object} An object containing width and color keys.\n     */\n    generateSaltireBorder(seed = this.seed) {\n        // let borderWidth = this.borderWidth;\n        let borderInfo = {};\n\n        // borderInfo.width = borderWidth + this.generateSaltireWidth((seed * .1234));\n        borderInfo.width = this.borderWidth;\n\n        return borderInfo;\n    }\n    /**\n     * Draws the Saltire on the given canvas.\n     *\n     * @example\n     * // Draws a Saltire on the canvas.\n     * const saltire = new Saltire();\n     * saltire.drawSaltire(ctx);\n     * @param {object} ctx - A canvas Context.\n     */\n    draw(ctx) {\n        const saltireWidth = this.generateSaltireWidth();\n\n        // Handle any borders first. We draw the borders as a background.\n        if (this.border) {\n            const border = this.generateSaltireBorder();\n            ctx.beginPath();\n            ctx.moveTo(0, 0); // Move to top left corner. Start here.\n            ctx.lineTo(settings.flagWidth, settings.flagHeight);\n\n            ctx.moveTo(0, settings.flagHeight);\n            ctx.lineTo(settings.flagWidth, 0);\n\n            ctx.strokeStyle = this.color.complement;\n            ctx.lineWidth = saltireWidth + (border.width * 2);\n            ctx.stroke();\n        }\n\n        // Now draw the main Saltire.\n        ctx.beginPath();\n\n        // First line of the X\n        ctx.moveTo(0, 0); // Move to top left corner. Start here.\n        ctx.lineTo(settings.flagWidth, settings.flagHeight);\n\n        // Second line of the X\n        ctx.moveTo(0, settings.flagHeight);\n        ctx.lineTo(settings.flagWidth, 0);\n\n        // Stroke it.\n        ctx.strokeStyle = this.color.color;\n        ctx.lineWidth = saltireWidth;\n        ctx.stroke();\n    }\n}\n\nexport default Saltire;\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/divisions/Saltire.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "Saltire",
    "memberof": "src/divisions/Saltire.js",
    "static": true,
    "longname": "src/divisions/Saltire.js~Saltire",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/divisions/Saltire.js",
    "importStyle": "Saltire",
    "description": "Saltire pattern.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "The Saltire pattern describes two diagonal lines crossing in the center of the field. An X pattern."
      },
      {
        "tagName": "@augments",
        "tagValue": "Division"
      }
    ],
    "interface": false,
    "extends": [
      "src/division.js~Division"
    ]
  },
  {
    "__docId__": 150,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/divisions/Saltire.js~Saltire",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Saltire.js~Saltire#constructor",
    "access": "public",
    "description": "Creates a Saltire.",
    "examples": [
      "// Instantiates a Saltire without a border.\nconst saltire = new Saltire();\n// Instantiates a Saltire with a border.\nconst saltireWithBorder = new Saltire(true);"
    ],
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "The number of Saltires in this instance. Should typically only be one."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "border",
        "description": "A boolean value to decide whether or not to draw a border based on the global seed setting."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "borderWidth",
        "description": "A number value to use when generating border width. This number is used in addition\nto the randomly generated border width determined by the seed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color string."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "borderColor",
        "description": "A hexadecimal color string."
      }
    ]
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "border",
    "memberof": "src/divisions/Saltire.js~Saltire",
    "static": false,
    "longname": "src/divisions/Saltire.js~Saltire#border",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "borderWidth",
    "memberof": "src/divisions/Saltire.js~Saltire",
    "static": false,
    "longname": "src/divisions/Saltire.js~Saltire#borderWidth",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "generateSaltireWidth",
    "memberof": "src/divisions/Saltire.js~Saltire",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Saltire.js~Saltire#generateSaltireWidth",
    "access": "public",
    "description": "Generates a percentage width for the Saltire lines based on the seed.",
    "examples": [
      "// Returns 81, meaning 81%\nsaltire.generateWidth(0.8112494706388412);"
    ],
    "see": [
      "{@link module:flag-generator/utilities~generateSeed|generateSeed()} for more info about the seed."
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A whole number used elsewhere as a percentage value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "A pseudo-random string generated based on a string value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A whole number used elsewhere as a percentage value."
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "generateSaltireBorder",
    "memberof": "src/divisions/Saltire.js~Saltire",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Saltire.js~Saltire#generateSaltireBorder",
    "access": "public",
    "description": "Generate border information for the Saltire.",
    "examples": [
      "// Returns an object with width and color keys.\nconst border = this.generateSaltireBorder(.123747918512398745);"
    ],
    "see": [
      "{@link module:flag-generator/utilities~generateSeed|generateSeed()} for more info about the seed."
    ],
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} An object containing width and color keys."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "A pseudo-random string generated based on a string value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object containing width and color keys."
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "draw",
    "memberof": "src/divisions/Saltire.js~Saltire",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/divisions/Saltire.js~Saltire#draw",
    "access": "public",
    "description": "Draws the Saltire on the given canvas.",
    "examples": [
      "// Draws a Saltire on the canvas.\nconst saltire = new Saltire();\nsaltire.drawSaltire(ctx);"
    ],
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "A canvas Context."
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/index.js",
    "content": "/**\n * @file Flag generator base.\n */\n/**\n * Flag module.\n *\n * @module flag-generator\n */\nimport * as Utilities from './utilities';\nimport Bend from './divisions/Bend';\nimport Border from './divisions/Border';\nimport Canton from './divisions/Canton';\nimport Chevron from './divisions/Chevron';\nimport Cross from './divisions/Cross';\nimport Fesses from './divisions/Fesses';\nimport Fusil from './divisions/Fusil';\nimport Lozenge from './divisions/Lozenge';\nimport Pales from './divisions/Pales';\nimport Pall from './divisions/Pall';\nimport Saltire from './divisions/Saltire';\nimport settings from './settings';\n\n// Ideas:\n//   - Take the flag width and height and divide it into 9 parts (rule of 3rds).\n//     Process each of the 9 parts individually for color\n//     After that use the 4 intersections to add more complexity.\n//\n//     Expanding on this idea, we should be able to apply patterns if we want to the Divisions themselves, looking to\n//     heraldry designs for inspiration:\n//      * Paly bendy\n//      * Lozengy  - diamonds in a pattern\n//\n\n// Prototypes / Classes\n// --------------------------------------------------------------------------------------------------------------\n/** Class representing a differently envisioned Flag. */\nclass Flag {\n\n  constructor(params = {id, aspectRatio, divisionCount, divisions, seed, color}) {\n    this.seed = params.seed ? params.seed : Utilities.generateSeed();\n    this.color = Utilities.generateColor(params.color, undefined, this.seed);\n    this.aspect = params.aspectRatio ? Utilities.processAspectRatioString(params.aspectRatio) : Utilities.processAspectRatioString(this.generatePseudoRandomRatio());\n    this.dimensions = Utilities.setDimensionsFromAspectObject(this.aspect);\n    this.totalArea = this.dimensions.h * this.dimensions.w;\n    this.divisionCount = params.divisionCount ? params.divisionCount : Utilities.generateCount(undefined, .4689, this.seed);\n    this.divisions = this.generateDivisions(this.divisionCount);\n    this.parentID = params.id;\n    // this.drawFlag() = this.drawFlag();\n    settings.flagHeight = this.dimensions.h;\n    settings.flagWidth = this.dimensions.w;\n    // settings.seed = this.seed;\n\n    // this.generatePseudoRandomRatio(1, 6);\n    console.log('flag constructor params', params);\n    console.log('flag generated color', this.color.color);\n\n\n  }\n\n  /**\n   * Generate a random aspect ratio string of the style '3:5'\n   *\n   * This function takes the limit value and generates a fibonacci sequence of\n   * aspect ratios up to that limit, then shuffles the ratios, and chooses\n   * one based on the seed.\n   * @example\n   * // Returns 3:5\n   * const newFlag = new Flag({id: 'test', seed: 0.3994258342288038});\n   * newFlag.generatePseudoRandomRatio();\n   * @param {number} limit - The maximum number of ratio strings to generate.\n   * @returns {string} An aspect ratio string.\n   */\n  generatePseudoRandomRatio(limit) {\n    const genLimit = Utilities.getLastDigit(this.seed);\n    const numSequence = limit || genLimit > 5 ? 5 : genLimit;\n    const arr = [[1, 1], [1, 2]];\n\n    for (let i = 1; i < numSequence; i++) {\n      const opGroup = arr[i];\n      const prevGroup = arr[i - 1];\n\n      let x = opGroup[0] + prevGroup[0];\n      let y = opGroup[1] + prevGroup[1];\n\n      arr[i + 1] = [x, y];\n    }\n\n    const shuffledArr = Utilities.pseudoShuffle(arr);\n    const choiceDigit = Utilities.getLastDigit(numSequence);\n\n    console.log('arr', shuffledArr);\n    return `${shuffledArr[choiceDigit][0]}:${shuffledArr[choiceDigit][1]}`;\n  }\n\n  generateDivisions(count) {\n    const basicOptions = {\n      seed: this.seed,\n    }\n    let divisions = [];\n    const divisionsOptions = [\n      new Pales(basicOptions),\n      new Cross(basicOptions),\n      new Fusil(basicOptions),\n      new Border(basicOptions),\n      new Lozenge(basicOptions),\n      new Fesses(basicOptions),\n      new Saltire(basicOptions),\n      new Pall(basicOptions),\n      new Chevron(basicOptions),\n      new Bend(basicOptions),\n    ];\n\n    const shuffled = Utilities.pseudoShuffle(divisionsOptions, this.seed);\n\n    // Randomly choose a number of divisions from the array:\n    for (let i = 0, len = count; i < count; i++) {\n      divisions.push(shuffled[i]);\n    }\n    return divisions;\n  }\n\n  drawFlag() {\n    const dimensions = this.dimensions;\n    const divisions = this.divisions;\n    const primaryColor = this.color.color;\n    const seed = this.seed;\n    const parentID = this.parentID !== 'undefined' ? this.parentID : 'root';\n    const canvasID = 'flag_' + (Math.round(seed * 100));\n    Utilities.generateCanvas(document, parentID, canvasID, dimensions);\n    const canvas = document.getElementById(canvasID);\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = primaryColor;\n    ctx.fillRect(0, 0, dimensions.w, dimensions.h);\n    for (let i = 0; i < divisions.length; i++) {\n      // Drawing pales.\n      divisions[i].draw(ctx);\n    }\n  }\n\n  destroyFlag(seed) {\n    const canvas = document.getElementById('flag_' + (Math.round(seed * 100)));\n    canvas.remove();\n  }\n\n}\n\n// Flag testing area\n// ----------------------------------------------------------------------------------------------------------------\n\nconst flagGenerator = (params = {id: 'root', seed: undefined, subFlag: undefined}) => {\n  console.log('Running the Flag Generator...');\n  console.log('Seed received by flagGenerator(): ', params.seed);\n  // Placeholders:\n  let divisions = [];\n  const seed = typeof params.seed !== 'undefined' ? params.seed : Utilities.generateSeed();\n\n  // Generate our flag's base color:\n  const seededColor = Utilities.randomHex(seed);\n  // console.log('Seeded color: ', seededColor);\n\n  // If we have no seed, go get one:\n  // seed = typeof seed != 'undefined' ? seed : generateSeed();\n  // seed = params.seed ? params.seed : typeof params.seed !== 'undefined' ? params.seed : Utilities.generateSeed();\n\n\n\n  // Decide if there should be any divisions:\n  // We'll use the seed to generate a binary value to decide whether or not we want any divisions at all.\n  // const divisionChoice = Math.round(seed);\n  // console.log('Do we want any division(s)? ', divisionChoice ? 'yes' : 'no');\n\n  console.log('got an ID from caller: ', params.id);\n  const newFlag = new Flag(params.id, '3:5');\n\n  return newFlag;\n\n};\n\n\n\n\nexport default {settings, Utilities, Flag, flagGenerator};\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "Flag",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Flag",
    "access": "public",
    "export": false,
    "importPath": "@carwin/flag-generator/src/index.js",
    "importStyle": null,
    "description": "Class representing a differently envisioned Flag.",
    "lineNumber": 37,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~Flag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Flag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "seed",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#seed",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "color",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#color",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "aspect",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#aspect",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "dimensions",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#dimensions",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "totalArea",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#totalArea",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "divisionCount",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#divisionCount",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "divisions",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#divisions",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "parentID",
    "memberof": "src/index.js~Flag",
    "static": false,
    "longname": "src/index.js~Flag#parentID",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "generatePseudoRandomRatio",
    "memberof": "src/index.js~Flag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Flag#generatePseudoRandomRatio",
    "access": "public",
    "description": "Generate a random aspect ratio string of the style '3:5'\n\nThis function takes the limit value and generates a fibonacci sequence of\naspect ratios up to that limit, then shuffles the ratios, and chooses\none based on the seed.",
    "examples": [
      "// Returns 3:5\nconst newFlag = new Flag({id: 'test', seed: 0.3994258342288038});\nnewFlag.generatePseudoRandomRatio();"
    ],
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An aspect ratio string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "The maximum number of ratio strings to generate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An aspect ratio string."
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "generateDivisions",
    "memberof": "src/index.js~Flag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Flag#generateDivisions",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "drawFlag",
    "memberof": "src/index.js~Flag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Flag#drawFlag",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "destroyFlag",
    "memberof": "src/index.js~Flag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Flag#destroyFlag",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "flagGenerator",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~flagGenerator",
    "access": "public",
    "export": false,
    "importPath": "@carwin/flag-generator/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "optional": true,
        "types": [
          "{\"id\": string, \"seed\": undefined, \"subFlag\": undefined}"
        ],
        "defaultRaw": {
          "id": "root"
        },
        "defaultValue": "{\"id\":\"root\"}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/settings.js",
    "content": "/**\n * @file\n * Houses project settings.\n */\n/**\n * The project settings for the current run of the Flag generator.\n *\n * @type {{flagHeight: number, seed: boolean, flagWidth: number}}\n */\nlet settings = {\n  seed: false,\n  flagWidth: undefined,\n  flagHeight: undefined,\n}\n\nexport default settings;\n\n// Complimentary Divisions\n// - a Border and a Pall look pretty good together.\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "settings",
    "memberof": "src/settings.js",
    "static": true,
    "longname": "src/settings.js~settings",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/settings.js",
    "importStyle": "settings",
    "description": "The project settings for the current run of the Flag generator.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "{flagHeight: number, seed: boolean, flagWidth: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/utilities.js",
    "content": "/**\n * @file Utilities for flag generation.\n */\n\nimport seedrandom from 'seedrandom';\nimport settings from './settings';\nimport tinycolor from 'tinycolor2';\n\n/**\n * Utilities for flag generation.\n *\n * @module flag-generator/utilities\n */\n\n/**\n * Generate the seed from a seed string.\n *\n * @function\n * @example\n * // Returns 0.8112494706388412\n * generateSeed('test');\n * @param {string} seedString - A string on which to run the prng function.\n */\nexport const generateSeed = (seedString) => {\n  const seed = typeof seedString !== 'undefined' ? seedrandom(seedString, {state: true}) : seedrandom(Math.floor(Math.random() * 1e9).toString(), {state: true});\n\n  // settings.seed = seed();\n  return seed();\n}\n/**\n * Generates a seed multiplier converting the characters of the provided string to numbers name.\n *\n * @function\n * @example\n * // Returns 0.5363260631705106\n * generateSeedMultiplier('Border');\n * @param {string} str - A string value to turn into charcodes.\n * @returns {number} A multiplier to be used with seed multiplication based decision making.\n * @todo I've read somewhere that parseFloat is dangerous without radx, I should figure out if that's true.\n * @todo: handle the case where settings.seed may not be set.\n */\nexport const generateSeedMultiplier = (seed, str) => {\n  // Make sure the string is a string.\n  str = str.toString();\n  // Add each character to an array.\n  let multiplier = '';\n  const strArray = str.toString().split('');\n  // Loop over the array of characters, turn them into a number, and add them to a string.\n  // I could probably do this more simply with array.map() or reduce() somehow.\n  for (let i = 0; i < strArray.length; i++) {\n      multiplier = multiplier + strArray[i].charCodeAt(0);\n  }\n  // Turn our multiplier string into an actual number.\n  multiplier = parseFloat('.' + multiplier * seed);\n  return multiplier;\n}\n\n/**\n * Modify a seed by multiplying it by a value.\n *\n * @function\n * @example\n * // Returns 0.05483563\n * modifySeed(0.2602354456965794, 0.2107154537);\n * @param {number} seed - The seed number on which generation depends.\n * @param {number} seedMultiplier - The multiplier used to alter the seed to generate values.\n * @returns {number} - The product of seed and seedMultiplier.\n */\n// export const modifySeed = (seed, seedMultiplier) => seed * seedMultiplier\nexport const modifySeed = (seed, seedMultiplier) => {\n  // console.log('seed to mod', seed);\n  // console.log('multi', seedMultiplier);\n  return seed * seedMultiplier\n}\n\n\n/**\n * Gets the last digit from a number.\n *\n * @function\n * @example\n * // Returns 7\n * getLastDigit(.2357);\n * @param {number} n - A number.\n * @returns {number} The last digit of n.\n */\nexport const getLastDigit = (n) => +(n.toString().substr(-1));\n\n\n/**\n * Generate a random hex color based on the seed.\n *\n * @function\n * @example\n * // returns #2b32ad\n * randomHex(0.8112494706388412);\n * @param {number} seed - The prng generated seed value under 1.\n * @param {number} seedModifier - A number used to perform modifications to the seed.\n * @returns {string} The pseudo-randomly generated hexadecimal color value.\n */\nexport const randomHex = (seed, seedModifier) => {\n    return '#'+((modifySeed(seed, seedModifier) % 1) * 0xFFFFFF << 0).toString(16).padStart(6, '0');\n};\n\n/**\n * Turn a hexadecimal color string into an rgb() object.\n *\n * @function\n * @example\n * // returns {r: 255, g: 255, b: 255}\n * hexToRgb('#ffffff');\n * @param {string} hex - A hexadecimal color string.\n * @returns {{r: number, b: number, g: number}} - An object containing RGB keys.\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\n/**\n * Convert a hexadecimal color string to an rgb() string.\n *\n * @function\n * @example\n * // Returns rgb(255, 255, 255)\n * convertHex('#ffffff');\n * @param {string} hex - A hexadecimal color string.\n * @returns {string} - An RGB color string.\n */\nexport const convertHex = (hex) => {\n    const rgbObject = hexToRgb(hex);\n    return 'rgb(' + rgbObject.r + ', ' + rgbObject.g + ', ' + rgbObject.b + ')';\n}\n/**\n * A color object.\n *\n * @typedef {object} ColorObject\n * @property {object} analogous - An object containing 6 hexadecimal color strings analogous to the originally generated color.\n * @property {string} color - A hexadecimal color value generated from the seed and a seedMultiplier.\n * @property {string} complement - A complement hexadecimal color value to the color string.\n * @property {object} monochromatic - An object containing 6 hexadecimal color strings describing the monochrome range of the original generated color.\n * @property {object} splitComplement - An object containing the originally generated color and two hexadecimal color string complements.\n * @property {object} tetrad - An object containing the originally generated color's tetrad.\n * @property {object} triad - An object containing the originally generated color's triad.\n */\n/**\n * Generates a color object from a modified seed using the tinycolor2 library.\n *\n * @function\n * @example\n * // Generates a ColorObject with a primary color key of #575109;\n * const colorObject = generateColor(80857473, 0.06556305047688744);\n * @param {number} seedMultiplier - The multiplier used to alter the seed to generate values.\n * @param {number} seed - The seed number on which generation depends.\n * @returns {...ColorObject} A {@link module:flag-generator/utilities~ColorObject}.\n */\nexport const generateColor = (hex, seedMultiplier = 80857473, seed) => {\n    let generated = randomHex(seed, seedMultiplier);\n    if (/^#/.test(hex)) {\n      generated = hex;\n    }\n    const color = {\n        color: tinycolor(generated).toHexString(),\n        complement: tinycolor(generated).complement().toHexString(),\n        splitComplement: tinycolor(generated).splitcomplement().map((sc) => sc.toHexString()),\n        triad: tinycolor(generated).triad().map((tr) => tr.toHexString()),\n        tetrad: tinycolor(generated).tetrad().map((te) => te.toHexString()),\n        analogous: tinycolor(generated).analogous().map((an) => an.toHexString()),\n        monochromatic: tinycolor(generated).monochromatic().map((mo) => mo.toHexString()),\n    }\n    return color;\n}\n\n/**\n * Shuffles an array predictably using the Fisher Yates shuffle algorithm.\n *\n * @function\n * @example\n * // Returns [1, 2, 3, 5, 4]\n * const originalArray = [1, 2, 3, 4, 5]\n * const shuffledArray = pseudoShuffle(originalArray, 0.7243609520746538);\n * @param {Array} arr - The array to be shuffled.\n * @param {number} seed - The pseudorandom string used to predictabbly apply the algorithm.\n * @returns {Array} The arr parameter, but shuffled.\n */\nexport const pseudoShuffle = (arr, seed) => {\n    let m = arr.length;\n    let t, i\n\n    while (m) {\n        i = Math.floor(seed * m--)\n        t = arr[m]\n        arr[m] = arr[i]\n        arr[i] = t\n    }\n    return arr;\n};\n/**\n * Takes an aspect ratio string, e.g.: 1:2, 2:3, 3:5, and returns an object with height (h) and width (w) keys.\n *\n * @function\n * @example\n * // Returns\n * // {\n * //     h: 3,\n * //     w: 5,\n * // }\n * const aspectObject = processAspectRatioString('3:5');\n * @param {string} aspect - A string describing a ratio.\n * @returns {object} An aspect ratio object containing height (h) and width (w) keys from the aspect ratio string.\n * @todo This function could be shortened significantly with a map callback.\n */\nexport const processAspectRatioString = (aspect) => {\n  aspect = aspect.toString().split(':');\n  let aspectObj = {};\n  for (let i = 0; i < aspect.length; i++) {\n    switch(i) {\n      case 0:\n        aspectObj.h = +(aspect[i]);\n        break;\n      case 1:\n        aspectObj.w = +(aspect[i]);\n        break;\n      default:\n        throw new Error('Could not process given aspect ratio string.');\n      }\n  }\n  return aspectObj;\n}\n\n/**\n * Turn an aspect object into more realistic dimensions.\n *\n * @function\n * @example\n * // Returns\n * // {\n * //   h: 300,\n * //   w: 500,\n * // }\n * const dimensions = setDimensionsFromAspectObject({h: 3, w: 5});\n * @param {object} aspect - An aspect object.\n * @param {number} multiplier - A number to multiply the aspect keys by. Defaults to 100.\n * @returns {object} An object containing height (h) and width (w) keys representing dimensions.\n */\nexport const setDimensionsFromAspectObject = (aspect, multiplier = 100) => ({\n  h: aspect.h * multiplier,\n  w: aspect.w * multiplier\n});\n\n/**\n * Creates a canvas element and append it to the document body.\n *\n * @function\n * @example\n * // Creates and appends the canvas with an id of 'myCanvas'.\n * generateCanvas(document, 'myCanvas');\n * @param {object} document - A document object.\n * @param {string} id - The Id to give the created canvas element.\n * @param {object} dimensions - An object containing height(h) and width (w) keys.\n */\nexport const generateCanvas = (document, parentID, canvasID, dimensions) => {\n  const parent = document.getElementById(parentID);\n  const canvas = document.createElement('canvas');\n  canvas.setAttribute('id', canvasID);\n  canvas.setAttribute('style', 'border: 1px solid black;');\n  canvas.setAttribute('width', dimensions.w);\n  canvas.setAttribute('height', dimensions.h);\n  parent.appendChild(canvas);\n}\n/**\n * Generates a number used for decision making based on the seed and a given multiplier.\n *\n * @function\n * @example\n * // Returns 1\n * generateCount(5, 0.8112494706388412, 0.6568774660735);\n * @param {number} limit - The maximum value of the count to be returned. Values above 9 are ignored.\n * @param {number} seedMultiplier - The multiplier used to alter the seed to generate values.\n * @param {number} seed - The seed number on which generation depends.\n * @returns {number} A single digit number between 0 and 9.\n */\nexport const generateCount = (limit, seedMultiplier, seed) => {\n    const modifiedSeed = modifySeed(seed, seedMultiplier);\n    let generated = getLastDigit(modifiedSeed);\n    if (generated > limit || generated === 0) {\n        generated = 1;\n    }\n    return generated;\n}\n\nexport const findGreaterNumber = (a, b) => {\n  let greater;\n  greater = a >= b ? a : b;\n  return greater;\n}\n\n// /**\n//  *\n//  * @returns {SVGSVGElement}\n//  */\n// const makeSVG = () => {\n//     console.log('Make an SVG.');\n//\n//     let svg1 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n//     svg1.setAttribute(\"width\", \"400\");\n//     svg1.setAttribute(\"height\", \"400\");\n//     svg1.setAttribute(\"viewBox\", \"0 0 800 300\");\n\n//     let cir1 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n//     cir1.setAttribute(\"cx\", 50);\n//     cir1.setAttribute(\"cy\", 50);\n//     cir1.setAttribute(\"r\", 50);\n//\n//     svg1.appendChild(cir1);\n//\n//     return svg1;\n//\n// }\n//\n//\n//\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/utilities.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "generateSeed",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~generateSeed",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{generateSeed}",
    "description": "Generate the seed from a seed string.",
    "examples": [
      "// Returns 0.8112494706388412\ngenerateSeed('test');"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "seedString",
        "description": "A string on which to run the prng function."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "function",
    "name": "generateSeedMultiplier",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~generateSeedMultiplier",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{generateSeedMultiplier}",
    "description": "Generates a seed multiplier converting the characters of the provided string to numbers name.",
    "examples": [
      "// Returns 0.5363260631705106\ngenerateSeedMultiplier('Border');"
    ],
    "lineNumber": 42,
    "todo": [
      "I've read somewhere that parseFloat is dangerous without radx, I should figure out if that's true.\n@todo: handle the case where settings.seed may not be set."
    ],
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} A multiplier to be used with seed multiplication based decision making."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "A string value to turn into charcodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A multiplier to be used with seed multiplication based decision making."
    }
  },
  {
    "__docId__": 177,
    "kind": "function",
    "name": "modifySeed",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~modifySeed",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{modifySeed}",
    "description": "Modify a seed by multiplying it by a value.",
    "examples": [
      "// Returns 0.05483563\nmodifySeed(0.2602354456965794, 0.2107154537);"
    ],
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} - The product of seed and seedMultiplier."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The seed number on which generation depends."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seedMultiplier",
        "description": "The multiplier used to alter the seed to generate values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The product of seed and seedMultiplier."
    }
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "getLastDigit",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~getLastDigit",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{getLastDigit}",
    "description": "Gets the last digit from a number.",
    "examples": [
      "// Returns 7\ngetLastDigit(.2357);"
    ],
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} The last digit of n."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "A number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The last digit of n."
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "randomHex",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~randomHex",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{randomHex}",
    "description": "Generate a random hex color based on the seed.",
    "examples": [
      "// returns #2b32ad\nrandomHex(0.8112494706388412);"
    ],
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} The pseudo-randomly generated hexadecimal color value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The prng generated seed value under 1."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seedModifier",
        "description": "A number used to perform modifications to the seed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The pseudo-randomly generated hexadecimal color value."
    }
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "hexToRgb",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~hexToRgb",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{hexToRgb}",
    "description": "Turn a hexadecimal color string into an rgb() object.",
    "examples": [
      "// returns {r: 255, g: 255, b: 255}\nhexToRgb('#ffffff');"
    ],
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{{r: number, b: number, g: number}} - An object containing RGB keys."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "A hexadecimal color string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{r: number, b: number, g: number}"
      ],
      "spread": false,
      "description": "An object containing RGB keys."
    }
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "convertHex",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~convertHex",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{convertHex}",
    "description": "Convert a hexadecimal color string to an rgb() string.",
    "examples": [
      "// Returns rgb(255, 255, 255)\nconvertHex('#ffffff');"
    ],
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{string} - An RGB color string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "A hexadecimal color string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An RGB color string."
    }
  },
  {
    "__docId__": 182,
    "kind": "typedef",
    "name": "ColorObject",
    "memberof": "src/utilities.js",
    "static": true,
    "longname": "src/utilities.js~ColorObject",
    "access": "public",
    "description": "A color object.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "analogous",
        "description": "An object containing 6 hexadecimal color strings analogous to the originally generated color."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "A hexadecimal color value generated from the seed and a seedMultiplier."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "complement",
        "description": "A complement hexadecimal color value to the color string."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "monochromatic",
        "description": "An object containing 6 hexadecimal color strings describing the monochrome range of the original generated color."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "splitComplement",
        "description": "An object containing the originally generated color and two hexadecimal color string complements."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "tetrad",
        "description": "An object containing the originally generated color's tetrad."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "triad",
        "description": "An object containing the originally generated color's triad."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ColorObject"
    }
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "generateColor",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~generateColor",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{generateColor}",
    "description": "Generates a color object from a modified seed using the tinycolor2 library.",
    "examples": [
      "// Generates a ColorObject with a primary color key of #575109;\nconst colorObject = generateColor(80857473, 0.06556305047688744);"
    ],
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{...ColorObject} A {@link module:flag-generator/utilities~ColorObject}."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seedMultiplier",
        "description": "The multiplier used to alter the seed to generate values."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The seed number on which generation depends."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "...ColorObject"
      ],
      "spread": true,
      "description": "A {@link module:flag-generator/utilities~ColorObject}."
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "pseudoShuffle",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~pseudoShuffle",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{pseudoShuffle}",
    "description": "Shuffles an array predictably using the Fisher Yates shuffle algorithm.",
    "examples": [
      "// Returns [1, 2, 3, 5, 4]\nconst originalArray = [1, 2, 3, 4, 5]\nconst shuffledArray = pseudoShuffle(originalArray, 0.7243609520746538);"
    ],
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} The arr parameter, but shuffled."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "The array to be shuffled."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The pseudorandom string used to predictabbly apply the algorithm."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The arr parameter, but shuffled."
    }
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "processAspectRatioString",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~processAspectRatioString",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{processAspectRatioString}",
    "description": "Takes an aspect ratio string, e.g.: 1:2, 2:3, 3:5, and returns an object with height (h) and width (w) keys.",
    "examples": [
      "// Returns\n// {\n//     h: 3,\n//     w: 5,\n// }\nconst aspectObject = processAspectRatioString('3:5');"
    ],
    "lineNumber": 217,
    "todo": [
      "This function could be shortened significantly with a map callback."
    ],
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object} An aspect ratio object containing height (h) and width (w) keys from the aspect ratio string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "aspect",
        "description": "A string describing a ratio."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An aspect ratio object containing height (h) and width (w) keys from the aspect ratio string."
    }
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "setDimensionsFromAspectObject",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~setDimensionsFromAspectObject",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{setDimensionsFromAspectObject}",
    "description": "Turn an aspect object into more realistic dimensions.",
    "examples": [
      "// Returns\n// {\n//   h: 300,\n//   w: 500,\n// }\nconst dimensions = setDimensionsFromAspectObject({h: 3, w: 5});"
    ],
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{object} An object containing height (h) and width (w) keys representing dimensions."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "aspect",
        "description": "An aspect object."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "multiplier",
        "description": "A number to multiply the aspect keys by. Defaults to 100."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object containing height (h) and width (w) keys representing dimensions."
    }
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "generateCanvas",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~generateCanvas",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{generateCanvas}",
    "description": "Creates a canvas element and append it to the document body.",
    "examples": [
      "// Creates and appends the canvas with an id of 'myCanvas'.\ngenerateCanvas(document, 'myCanvas');"
    ],
    "lineNumber": 266,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "document",
        "description": "A document object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The Id to give the created canvas element."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dimensions",
        "description": "An object containing height(h) and width (w) keys."
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "generateCount",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~generateCount",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{generateCount}",
    "description": "Generates a number used for decision making based on the seed and a given multiplier.",
    "examples": [
      "// Returns 1\ngenerateCount(5, 0.8112494706388412, 0.6568774660735);"
    ],
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} A single digit number between 0 and 9."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "limit",
        "description": "The maximum value of the count to be returned. Values above 9 are ignored."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seedMultiplier",
        "description": "The multiplier used to alter the seed to generate values."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seed",
        "description": "The seed number on which generation depends."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A single digit number between 0 and 9."
    }
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "findGreaterNumber",
    "memberof": "src/utilities.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utilities.js~findGreaterNumber",
    "access": "public",
    "export": true,
    "importPath": "@carwin/flag-generator/src/utilities.js",
    "importStyle": "{findGreaterNumber}",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/utilities.test.js",
    "content": "import * as Utilities from './utilities.js'\nimport settings from './settings';\n\nsettings.flagHeight = 300;\nsettings.flagWidth = 500;\n\ndescribe('Utilty functions', () => {\n  const seed = Utilities.generateSeed('test');\n  const multiplier = Utilities.generateSeedMultiplier('Fesses');\n\n  describe('General data utilities', () => {\n    test('getLastDigit() function the last digit of a given number string.', () => {\n      expect(Utilities.getLastDigit(.2357)).toBe(7);\n    });\n\n    describe('pseudoShuffle() function', () => {\n      test('pseudoShuffle() function predictably shuffles an array', () => {\n        expect(Utilities.pseudoShuffle([1,2,3,4,5], 0.7243609520746538)).toEqual([1, 2, 5, 3, 4]);\n      });\n      test('function returns an array if the seed parameter is omitted', () => {\n        expect(typeof Utilities.pseudoShuffle([1,2,3,4,5])).toHaveLength;\n      });\n    });\n\n    describe('generateCount() function', () => {\n      test('function returns a consistent number given the same inputs.', () => {\n        expect(Utilities.generateCount(5, multiplier, seed)).toBe(5);\n        expect(Utilities.generateCount(9, multiplier, seed)).toBe(5);\n      });\n\n      test('function works if the seed parameter is omitted', () => {\n        expect(Utilities.generateCount(1, 1)).toBe(1);\n      });\n\n      test('function returns 1 if the generated number would be 0.', () => {\n        expect(Utilities.generateCount(0, 0, 0)).toBe(1);\n      });\n    });\n  });\n\n  describe('Seed functions', () => {\n    test('Consistent seed is generated given the same string.', () => {\n      expect(Utilities.generateSeed('test')).toBe(0.8722025543160253);\n    });\n\n    test('Seed generation with no seed string produces a seed.', () => {\n      expect(typeof Utilities.generateSeed()).toBe('number');\n    });\n\n    test('generateSeedMultiplier() produces a number.', () => {\n      expect(typeof multiplier).toBe('number');\n      expect(multiplier).toBe(0.6114237166379292);\n    })\n\n    test('modifySeed() provides the product of a seed and a seedMultiplier', () => {\n      expect(Utilities.modifySeed(seed, multiplier)).toBe(0.5332853274209995);\n    });\n  });\n\n  describe('Color functions', () => {\n\n    describe('randomHex() function', () => {\n      test('function produces a reproducable hex color given the same input.', () => {\n        expect(Utilities.randomHex(seed, multiplier)).toBe('#888562');\n      });\n\n      test('function produces a hex color string if the seed parameter is omitted', () => {\n        expect(typeof Utilities.randomHex(undefined, multiplier)).toMatch('string');\n        expect(Utilities.randomHex(undefined, multiplier)).toMatch(/^#/);\n      });\n    });\n\n    describe('hexToRgb() function', () => {\n      test('function turns a hex color string into an object containing r, g, and b keys representing the same color', () => {\n        expect(Utilities.hexToRgb('#ffffff')).toEqual({r: 255, g: 255, b: 255});\n      });\n      test('function returns null if hex string parameter cannot be evaluated', () => {\n        expect(Utilities.hexToRgb('ffff')).toBe(null);\n      });\n    });\n\n    test('convertHex() function turns a hex color string into an rgb() color string', () => {\n      expect(Utilities.convertHex('#ffffff')).toBe('rgb(255, 255, 255)');\n    });\n\n    test('generateColor() function returns an object with color keys.', () => {\n      const colorObj = Utilities.generateColor();\n      expect(typeof colorObj).toBe('object');\n      expect(typeof colorObj.color).toBe('string');\n      expect(typeof colorObj.complement).toBe('string');\n      expect(typeof colorObj.splitComplement).toBe('object');\n      expect(typeof colorObj.triad).toBe('object');\n      expect(typeof colorObj.tetrad).toBe('object');\n      expect(typeof colorObj.analogous).toBe('object');\n      expect(typeof colorObj.monochromatic).toBe('object');\n    });\n  });\n\n  describe('Canvas and Dimension utilties', () => {\n    test('processAspectRatioString() function returns an object containing h and w keys.', () => {\n      expect(Utilities.processAspectRatioString('3:5')).toEqual({h: 3, w: 5});\n      expect(() => {\n        Utilities.processAspectRatioString('3:5:8')\n      }).toThrow('Could not process given aspect ratio string.');\n    });\n\n    test('setDimensionsFromAspectObject() function returns an object containing h and w keys.', () => {\n      expect(Utilities.setDimensionsFromAspectObject({h: 3, w: 5})).toEqual({h: 300, w: 500});\n    });\n\n    test('generateCanvas() function creates a canvas object', () => {\n      document.body.innerHTML = `\n        <div class=\"test\" id=\"test\">\n        </div>\n      `;\n      const testMarkup = document.getElementById('test');\n      Utilities.generateCanvas(document, 'test', 'testCanvas', {h: 300, w: 500});\n      expect(testMarkup.innerHTML).toContain('canvas');\n    });\n  });\n\n});\n",
    "static": true,
    "longname": "/home/narwic/Projects/Home/flag-generator/src/utilities.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Flag Generator\n\nThe `flag-generator` package is a vexillography tool that provides a number of classes and functions to facilitate the creation of flags using the Canvas API.\n\n## Usage\n\nAn implementation of the flag-generator package can be found at [carwin's generators project](https://github.com/carwin/generators).\n\nAt the moment this package is only published in the GitHub NPM package registry.\n\nAdd the package to your project:\n\n``` shell\nnpm install --save @carwin/flag-generator\n```\n\nImport the package:\n\n``` javascript\n// YourFile.js\nimport flagGenerator from '@carwin/flag-generator';\n```\n\nUse the package to do things:\n\n``` javascript\n// Generate a random seed:\nconst seed = flagGenerator.Utilities.generateSeed();\n\n// Generate a seed from a string:\nconst seedFromString = flagGenerator.Utilities.generateSeed('my cool flag');\n\n// Instantiate a flag\nconst flagOptions = {\n  id: \"my_flag_canvas_id\",\n  aspectRatio: \"3:5\",\n  divisionCount: 3,\n  color: flagGenerator.Utilities.generateColor(seedFromString),\n  seed: seedFromString,\n}\nconst coolFlag = new flagGenerator.Flag(flagOptions);\n\n// Create a canvas and draw the flag:\ncoolFlag.draw();\n```\n",
    "longname": "/home/narwic/Projects/Home/flag-generator/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@carwin/flag-generator\",\n  \"version\": \"1.0.1\",\n  \"repository\": \"git://github.com/carwin/flag-generator.git\",\n  \"description\": \"A flag generator\",\n  \"main\": \"dist/flag-gen.js\",\n  \"publishConfig\": {\n    \"registry\": \"https://npm.pkg.github.com\"\n  },\n  \"scripts\": {\n    \"test\": \"jest --coverage\",\n    \"build:dev\": \"webpack --config webpack.dev.babel.js\",\n    \"build:prod\": \"webpack --config webpack.prod.babel.js\",\n    \"watch\": \"webpack --config webpack.dev.babel.js --watch\",\n    \"predeploy\": \"npm run build:dev\",\n    \"deploy\": \"gh-pages -d docs --remote github\"\n  },\n  \"keywords\": [\n    \"flag\"\n  ],\n  \"author\": \"Carwin Young\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.12.9\",\n    \"@babel/preset-env\": \"^7.12.7\",\n    \"@babel/register\": \"^7.12.1\",\n    \"babel-eslint\": \"^10.1.0\",\n    \"babel-jest\": \"^26.6.3\",\n    \"babel-loader\": \"^8.2.1\",\n    \"babel-plugin-add-module-exports\": \"^1.0.4\",\n    \"babel-plugin-rewire\": \"^1.2.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"esdoc-webpack-plugin\": \"^1.0.1\",\n    \"eslint\": \"^7.14.0\",\n    \"eslint-loader\": \"^4.0.2\",\n    \"eslint-plugin-jsdoc\": \"^30.7.8\",\n    \"gh-pages\": \"^3.1.0\",\n    \"jest\": \"^26.6.3\",\n    \"jest-canvas-mock\": \"^2.3.0\",\n    \"lodash\": \"^4.17.20\",\n    \"rewire\": \"^5.0.0\",\n    \"seedrandom\": \"^3.0.5\",\n    \"sockjs-client\": \"^1.5.0\",\n    \"webpack\": \"^5.6.0\",\n    \"webpack-cli\": \"^4.2.0\",\n    \"webpack-merge\": \"^5.4.0\"\n  },\n  \"dependencies\": {\n    \"tinycolor2\": \"^1.4.2\"\n  },\n  \"jest\": {\n    \"setupFiles\": [\n      \"jest-canvas-mock\"\n    ]\n  }\n}\n",
    "longname": "/home/narwic/Projects/Home/flag-generator/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]